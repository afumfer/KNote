@page "/counter"

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<button class="btn btn-primary" @onclick="OnFolderSelectorTest">Folder selector test</button>

<hr />

@if(folderSelected != null)
{
    <p>@folderSelected.Name </p>
}

<p>AppState (CascadingParameter): @appState.AppMode</p>

<div style="display:flex;">
    <div style="width: 150px">
        <select @bind="@appState.AppMode" class="form-control" style="margin-top: 15px">
            <option value="Task">Task</option>
            <option value="Blog">Blog</option>
            <option value="Wiki">Wiki</option>
        </select>
    </div>
</div>

<hr />

<KntFolderSelector @ref="kntFolderSelector" OnCancel="onCancel" OnConfirm="onConfirm"></KntFolderSelector>

@code {
    [CascadingParameter] protected AppState appState { get; set; }
    [CascadingParameter] private Task<AuthenticationState> athenticationState { get; set; }

    private int currentCount = 0;
    private KntFolderSelector kntFolderSelector;

    private FolderInfoDto folderSelected;

    private async Task IncrementCount()
    {
        var authState = await athenticationState;

        var user = authState.User;

        if (user.Identity.IsAuthenticated)
            currentCount++;
        else
            currentCount--;
    }

    private void OnFolderSelectorTest()
    {
        kntFolderSelector.Show();
    }

    #region  AppState changed subscription 

    protected override void OnInitialized()
    {
        appState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private void onConfirm(FolderInfoDto f)
    {
        folderSelected = f;
        kntFolderSelector.Hide();
    }

    private void onCancel()
    {
        kntFolderSelector.Hide();
    }

    #endregion 

}

@page "/"
@page "/index"

@using KNote.Client.Pages.Notes

@inject IKntClientDataService  dataService
@inject NavigationManager navigationManger
@inject IShowMessages showMessages

<div>
    <h3>Recent notes</h3>
    <p>Mode: @appState.AppMode</p>
    <NotesList Notes="notes" NoteDelete="OnNoteDelete" NoteEdit="OnNoteEdit" />
</div>

<ModalDialog @ref="modalDialog" Title="Delete user" onConfirm="OnConfirmDelete" onCancel="OnCancelDelete">
    <div><p>Are you sure you want to delete user "@itemDelete.Topic (@itemDelete.NoteNumber)" ?</p></div>
</ModalDialog>

@code {
    [CascadingParameter] private AppState appState { get; set; }

    private List<NoteInfoDto> notes;
    private ModalDialog modalDialog;
    private NoteInfoDto itemDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotes();
    }

    private async Task LoadNotes()
    {
        notes = null;
        var res = await dataService.Get<Result<List<NoteInfoDto>>>("api/notes/recentnotes");
        notes = res.Response.Entity;
    }

    private void OnNoteEdit(Guid noteId)
    {
        navigationManger.NavigateTo($"notes/edit/{noteId}/index");
    }

    private void OnNoteDelete(NoteInfoDto item)
    {
        modalDialog.Show();
        itemDelete = item;
    }

    private async Task OnConfirmDelete()
    {
        modalDialog.Hide();

        var httpResponse = await dataService.Delete($"api/notes/{itemDelete.NoteId}");
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            await LoadNotes();
        }

        itemDelete = null;
    }

    private void OnCancelDelete()
    {
        modalDialog.Hide();
        itemDelete = null;
    }

}

@page "/folders"

@inject IKntClientDataService  dataService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages

@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]

<div class="container-fluid">
    <div class="row">
        <div class="col-6">
            <h3>Folders index</h3>
        </div>
        <div class="col-6 float-right">
            <button class="btn btn-sm btn-warning mx-1 float-right"
                    @onclick="GoNewFolder"
                    data-toggle="tooltip" title="New folder">
                <i class="oi oi-bookmark"></i> New folder
            </button>
        </div>
    </div>
</div>
<hr class="mt-0" />


@if (foldersTree == null)
{
    <p><em>Loading tree folders ...</em></p>
}
else
{
    <KntFoldersTreeView FoldersInfo="foldersTree"
                        EditMode="true"
                        FolderSelected="OnFolderSelected"
                        FolderEdit="OnFolderEdit"
                        FolderDelete="OnFolderDelete" />
}

<ModalDialog @ref="modalDialog" Title="Delete folder" onConfirm="OnConfirmDelete" onCancel="OnCancelDelete">
    <div><p>Are you sure you want to delete folder "@itemDelete.Name" ?</p></div>
</ModalDialog>

@code {
    private List<FolderInfoDto> foldersTree;
    private FolderInfoDto folder;
    private ModalDialog modalDialog;
    private FolderInfoDto itemDelete;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        folder = null;
        var res = await dataService.Get<Result<List<FolderInfoDto>>>("api/folders/gettree");
        foldersTree = res.Response.Entity;

        if (foldersTree?.Count > 0)
        {
            var f = foldersTree.Select(x => x).FirstOrDefault();
            f.Selected = true;
            OnFolderSelected(f);
        }
    }

    private void OnFolderSelected(FolderInfoDto f)
    {
        folder = f;
    }

    private void OnFolderDelete(FolderInfoDto folder)
    {
        modalDialog.Show();
        itemDelete = folder;
    }

    private async Task OnConfirmDelete()
    {
        modalDialog.Hide();

        var httpResponse = await dataService.Delete($"api/folders/{itemDelete.FolderId}");
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            foldersTree = null;
            await Load();
        }

        itemDelete = null;
    }

    private void OnCancelDelete()
    {
        modalDialog.Hide();
        itemDelete = null;
    }

    private void OnFolderEdit(FolderInfoDto folder)
    {
        navigationManager.NavigateTo($"folders/edit/{folder.FolderId}");
    }

    void GoNewFolder()
    {
        navigationManager.NavigateTo($"folders/new");
    }

}

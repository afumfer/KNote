@inject IShowMessages showMessages

<EditForm Model="Folder" Context="formContext">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group">
        <label>Topic:</label>
        <div class="input-group">
            <InputText class="form-control" @bind-Value="@Folder.Name" />
            <div class="input-group-append">
                <label class="btn btn-outline-secondary" data-toggle="tooltip" title="Folder number (automatically assigned)">
                    #@Folder.FolderNumber
                </label>
            </div>
        </div>
        <ValidationMessage For="@(() => Folder.Name)" />
    </div>

    <div class="form-group">
        <label>Tags:</label>
        <InputText class="form-control" @bind-Value="@Folder.Tags" />
        <ValidationMessage For="@(() => Folder.Tags)" />
    </div>

    <div class="form-group">
        <label>Order:</label>
        <InputNumber class="form-control" @bind-Value="@Folder.Order" />
        <ValidationMessage For="@(() => Folder.Order)" />
    </div>

    <div class="form-group">
        <label>Order notes:</label>
        <InputText class="form-control" @bind-Value="@Folder.OrderNotes" />
        <ValidationMessage For="@(() => Folder.OrderNotes)" />
    </div>

    <div class="form-group">
        <label>Parent folder:</label>
        <div class="input-group mb-3">
            <input type="text" disabled class="form-control" @bind="@nameParent" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="@OnResetParentFolder"
                        data-toggle="tooltip" title="Reset parent folder">
                    X
                </button>
                <button class="btn btn-outline-secondary" type="button" @onclick="@OnFolderSelector"
                        data-toggle="tooltip" title="Select folder">
                    ...&nbsp;<i class="fa fa-folder" aria-hidden="true"></i>
                </button>
            </div>
        </div>
        <ValidationMessage For="@(() => Folder.ParentId)" />
    </div>
    
    <button class="btn btn-success" @onclick="(() => Save(formContext))">Save changes</button>

    <p> </p>
    <hr />

    <KntFolderSelector @ref="kntFolderSelector" OnCancel="onCancelFolderSelector" OnConfirm="onConfirmFolderSelector"></KntFolderSelector>

</EditForm>

@code {

    [Parameter] public FolderDto Folder { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private KntFolderSelector kntFolderSelector;

    private string nameParent = "(root)";

    protected override void OnInitialized()
    {
        if (Folder.ParentFolderDto != null)
            nameParent = Folder.ParentFolderDto.Name;

        base.OnInitialized();
    }

    protected async Task Save(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {
            await showMessages.ShowErrorMessage("Incorrect data, check the required attributes.");
            return;
        }

        await OnValidSubmit.InvokeAsync(formContext);
    }
  
    #region Managment FolderSelector

    private void OnFolderSelector()
    {
        kntFolderSelector.Show();
    }

    private void onConfirmFolderSelector(FolderInfoDto f)
    {     
        Folder.ParentId = f.FolderId;
        Folder.ParentFolderDto = f.GetSimpleDto<FolderDto>();
        nameParent = Folder.ParentFolderDto.Name;
        kntFolderSelector.Hide();
    }

    private void onCancelFolderSelector()
    {
        kntFolderSelector.Hide();     
    }

    private void OnResetParentFolder()
    {
        Folder.ParentId = null;
        nameParent = "(root)";        
    }

    #endregion

}


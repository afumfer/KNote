@page "/folders/edit/{FolderId}"

@inject IKntClientDataService  dataService
@inject NavigationManager navigationManger
@inject IShowMessages showMessages

@attribute [Authorize(Roles = "Admin, ProjecManager")]

@if (folder != null)
{    
    <FolderForm Title="Folder edit" OnValidSubmit="Edit" Folder="folder" />
}
else
{
    <text>Loading ... </text>
}

@code {
    [CascadingParameter] public AppState appState { get; set; }

    [Parameter] public string FolderId { get; set; }

    private FolderDto folder;

    protected async override Task OnInitializedAsync()
    {
        appState.OnChange += StateHasChanged;

        var httpResponse = await dataService.Get<Result<FolderDto>>($"api/folders/{FolderId}");
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
            navigationManger.NavigateTo("folders");
        }
        else
        {
            folder = httpResponse.Response.Entity;
        }

        base.OnInitialized();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private async Task Edit()
    {
        var httpResponse = await dataService.Put<FolderDto>("api/folders", folder);
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            if(appState.FoldersTree != null)
            {
                FolderInfoDto toUpdate;
                appState.FoldersIndex.TryGetValue(folder.FolderId, out toUpdate);
                if (toUpdate != null)
                {
                    if(toUpdate.ParentId == folder.ParentId)
                        toUpdate.Name = folder.Name;
                    else
                        appState.FoldersTree = null;
                }
                else
                {
                    appState.FoldersTree = null;
                }
            }

            navigationManger.NavigateTo("folders");
        }
    }

}

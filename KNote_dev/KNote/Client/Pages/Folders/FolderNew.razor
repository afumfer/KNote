@page "/folders/new"

@inject IKntClientDataService  dataService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages

@attribute [Authorize(Roles = "Admin, ProjecManager")]

<FolderForm Title="New folder" OnValidSubmit="OnNew" OnExit="OnExit" Folder="folder" />

@code {
    [CascadingParameter] public AppState appState { get; set; }

    private FolderDto folder;

    protected override void OnInitialized()
    {
        appState.OnChange += StateHasChanged;

        folder = new FolderDto();
        if(appState != null)
        {
            folder.ParentId = appState.SelectedFolder.FolderId;
            folder.ParentFolderDto = appState.SelectedFolder.GetSimpleDto<FolderDto>();
        }        
        base.OnInitialized();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private async Task OnNew()
    {
        var httpResponse = await dataService.Post<FolderDto,Result<FolderDto>>("api/folders", folder);
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            if (appState.FoldersTree != null)
            {
                FolderDto toUpdate;
                var newFolder = httpResponse.Response.Entity.GetSimpleDto<FolderDto>();
                newFolder.Selected = true;
                appState.folderOldSelected.Selected = false;

                if (newFolder.ParentId == null)
                {
                    if (appState.FoldersTree != null)
                        appState.FoldersTree.Add(newFolder.GetSimpleDto<FolderDto>());
                }
                else
                {
                    if (appState.FoldersIndex.TryGetValue((Guid)folder.ParentId, out toUpdate))
                    {
                        if (toUpdate != null)
                        {
                            if(toUpdate.Expanded == true)
                            {
                                toUpdate.ChildFolders.Add(newFolder);
                                toUpdate.Selected = false;
                                toUpdate.Expanded = true;
                            }
                            else
                            {
                                appState.FoldersTree = null;
                            }
                        }
                        else
                        {
                            appState.FoldersTree = null;
                        }
                    }
                }
            }

            navigationManager.NavigateTo("folders");
        }
    }

    private void OnExit()
    {
        navigationManager.NavigateTo("folders");
    }

}

@page "/notes/search"
@page "/notessearch"

@inject IKntClientDataService dataService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages
@inject HttpClient Http

@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]

<div>
    <h3>Notes Search</h3>
    <hr class="mt-0" />
</div>

<div class="form-group row">
    <div class="input-group col-sm-11 mb-2" id="atrText">
        <input type="text" class="form-control" @bind-value="textSearch" @bind-value:event="oninput"
               @onkeypress="@((KeyboardEventArgs e) => TopicKeyPress(e))"
               placeholder="Text search  ..." />
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick="@CleanOnClick"
                    data-toggle="tooltip" title="Clean search"> X </button>
        </div>
    </div>

    <div class="col-1 float-left">
        <button type="button" class="btn btn-primary mb-2 mx-sm-3"  @onclick="OnLoadListNotes"
                data-toggle="tooltip" title="Apply search">
            <span class="oi oi-magnifying-glass" aria-hidden="true"></span> 
        </button>
    </div>
</div>

<hr />

<div class="row">
    <div class="col-9">
        <Pagination CurrentPage="currentPage" SelectedPage="onSelectedPage"
                    TotalPages="totalPages"></Pagination>
    </div>
    <div class="col-3">
        @if (notes != null && notes.Count > 0)
        {
            <span class="float-right mt-1">
                @if (viewMode == 0)
                {
                    <button class="btn btn-sm btn-dark mx-1"
                            @onclick="ToggleView"
                            data-toggle="tooltip" title="Item mode view">
                        <i class="fa fa-file-text-o"></i> Item mode view
                    </button>
                }
                else
                {
                    <button class="btn btn-sm btn-dark mx-1"
                            @onclick="ToggleView"
                            data-toggle="tooltip" title="Table mode view">
                        <i class="fa fa-table"></i> Table mode view
                    </button>
                }
            </span>
        }
        else
        {
            <span>&nbsp;</span>
        }
    </div>
</div>

@if (viewMode == 0)
{
    <NotesIndex Notes="notes" OnNoteDelete="GoNoteDelete" OnNoteEdit="GoNoteEdit" OnNoteView="GoNoteView"></NotesIndex>
}
else
{
    <NotesList Notes="notes" OnNoteDelete="GoNoteDelete" OnNoteEdit="GoNoteEdit" OnNoteView="GoNoteView" />
}

<ModalDialog @ref="modalDialog" Title="Delete note" onConfirm="OnConfirmDelete" onCancel="OnCancelDelete">
    <div><p>Are you sure you want to delete note "@itemDelete.Topic (@itemDelete.NoteNumber)" ?</p></div>
</ModalDialog>


@code {
    [CascadingParameter] private AppState appState { get; set; }

    private List<NoteInfoDto> notes;

    private ModalDialog modalDialog;
    private NoteInfoDto itemDelete;

    private int viewMode = 0;

    private string textSearch = "";

    private Dictionary<string, string> queryStringsDict = new Dictionary<string, string>();
    private int currentPage = 1;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        appState.OnChange += AppStateHasChanged;

        var url = navigationManager.Uri;
        var queries = navigationManager.GetQueryStrings(url);

        if (queries == null)
        {
            await GetFilteredNotes(string.Empty);
        }
        else
        {
            queryStringsDict = queries;
            LoadFormControls();
            var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];
            await GetFilteredNotes(queryStrings);
        }
    }

    public void Dispose()
    {
        appState.OnChange -= AppStateHasChanged;
    }

    private void AppStateHasChanged()
    {
        Console.WriteLine("AppStateHasChanged");

        // TODO: Limpiar basura ...

        //currentPage = 1;
        //textSearch = appState.TextSearch;

        //LoadListNotes();

        //notes = new List<NoteInfoDto>
        //{
        //    new NoteInfoDto {Topic = "xxx" },
        //    new NoteInfoDto {Topic = "xxx1" },
        //    new NoteInfoDto {Topic = "xxx2" },
        //};
    }

    #region Utils

    private void ToggleView()
    {
        viewMode = (viewMode == 0) ? 1 : 0;
    }

    private void LoadFormControls()
    {
        if (queryStringsDict.ContainsKey("textSearch"))
        {
            textSearch = queryStringsDict["textSearch"];
        }

        if (queryStringsDict.ContainsKey("page"))
        {
            int.TryParse(queryStringsDict["page"], out currentPage);
        }
    }

    private string BuildQueryStrings()
    {
        if (queryStringsDict == null) { queryStringsDict = new Dictionary<string, string>(); }
        queryStringsDict["textSearch"] = textSearch?.ToString();
        queryStringsDict["page"] = currentPage.ToString();

        var defaultValues = new List<string>() { "false", "", "0" };

        var strReturn = string.Join("&", queryStringsDict
            .Where(x => !defaultValues.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

        return strReturn;
    }

    #endregion

    #region Navigation events

    private async Task OnLoadListNotes()
    {
        currentPage = 1;
        await LoadListNotes();
    }

    private async Task TopicKeyPress(KeyboardEventArgs e)
    {        
        if (e.Key == "Enter")
        {
            await LoadListNotes();
        }
    }

    private async Task CleanOnClick()
    {
        textSearch = "";
        currentPage = 1;
        await LoadListNotes();
    }

    private async Task onSelectedPage(int page)
    {
        currentPage = page;
        await LoadListNotes();
    }

    #endregion

    #region Load data ....

    private async Task LoadListNotes()
    {
        var queryStrings = BuildQueryStrings();
        navigationManager.NavigateTo("notes/search?" + queryStrings);
        await GetFilteredNotes(queryStrings);
    }

    private async Task GetFilteredNotes(string queryString)
    {
        notes = null;
        var httpResponse = await dataService.Get<Result<List<NoteInfoDto>>>("api/notes/getsearch?" + queryString);

        totalPages = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPages").FirstOrDefault());

        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            notes = httpResponse.Response.Entity;
        }
    }

    private void GetFilteredNotes2(string queryString)
    {
        notes = null;
        var httpResponse = dataService.Get<Result<List<NoteInfoDto>>>("api/notes/getsearch?" + queryString).Result;

        totalPages = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPages").FirstOrDefault());

        if (httpResponse.Error)
        {
            //await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            notes = httpResponse.Response.Entity;
        }
    }


    #endregion

    #region  Edit / Delete events ...

    private void GoNoteView(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/{note.NoteId}");
    }

    private void GoNoteEdit(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/edit/{note.NoteId}/notessearch");
    }

    private void GoNoteDelete(NoteInfoDto item)
    {
        modalDialog.Show();
        itemDelete = item;
    }

    private void OnCancelDelete()
    {
        modalDialog.Hide();
        itemDelete = null;
    }

    private async Task OnConfirmDelete()
    {
        modalDialog.Hide();

        var httpResponse = await dataService.Delete($"api/notes/{itemDelete.NoteId}");
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            await LoadListNotes();
        }

        itemDelete = null;
    }

    #endregion

}

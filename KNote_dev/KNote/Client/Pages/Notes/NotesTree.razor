@page "/notes/tree"
@page "/tree"

@inject IKntClientDataService  dataService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages

@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]

<div class="container-fluid">
    <div class="row">
        <div class="col-6">
            <h3>Notes tree</h3>
        </div>
        <div class="col-6 float-right">
            <button class="btn btn-sm btn-warning mx-1 float-right"
                    @onclick="GoNewNote"
                    data-toggle="tooltip" title="New note">
                <i class="oi oi-bookmark"></i> New note
            </button>
        </div>
    </div>
</div>
<hr class="mt-0" />

<div class="row">

    <div class="col-lg-12 pt-2 bg-light border">
        @if (folder == null)
        {
            <h5>( ... no folder selected ...)</h5>
        }
        else
        {
            <div class="row">
                <div class="col-10">
                    <h5><span class="oi oi-folder pr-3"></span>@folder.Name</h5>
                </div>
                <div class="col-2">
                    <span class="float-right">
                        @if (viewMode == 0)
                        {
                            <button class="btn btn-sm btn-dark mx-1"
                                    @onclick="ToggleView"
                                    data-toggle="tooltip" title="View item mode">
                                <i class="fa fa-file-text-o"></i>
                            </button>
                        }
                        else 
                        { 
                            <button class="btn btn-sm btn-dark mx-1"
                                    @onclick="ToggleView"
                                    data-toggle="tooltip" title="View table mode" >
                                <i class="fa fa-table"></i>
                            </button>                        
                        }
                    </span>
                </div>
            </div>                
        }
    </div>

    <div class="col-lg-3 pt-2 pb-2 bg-light border">
        <KntFoldersTreeView FoldersInfo="foldersTree" FolderSelected="OnFolderSelected" />
    </div>
    <div class="col-lg-9 pt-2 pb-2 border">
        @if (viewMode == 0)
        {
            <NotesIndex Notes="notes" OnNoteDelete="Delete" OnNoteEdit="GoEditNote" OnNoteView="GoViewNote"></NotesIndex>
        }
        else
        {
            <NotesList Notes="notes" OnNoteDelete="Delete" OnNoteEdit="GoEditNote" OnNoteView="GoViewNote"/>
        }
    </div>
</div>

<ModalDialog @ref="modalDialog" Title="Delete note" onConfirm="OnConfirmDelete" onCancel="OnCancelDelete">
    <div><p>Are you sure you want to delete user "@itemDelete.Topic (@itemDelete.NoteNumber)" ?</p></div>
</ModalDialog>

@code {
    private List<FolderInfoDto> foldersTree;
    private FolderInfoDto folder;
    private ModalDialog modalDialog;
    private NoteInfoDto itemDelete;
    private int viewMode = 0;

    List<NoteInfoDto> notes;

    protected override async Task OnInitializedAsync()
    {
        var res = await dataService.Get<Result<List<FolderInfoDto>>>("api/folders/gettree");
        foldersTree = res.Response.Entity;

        if (foldersTree?.Count > 0)
        {
            var f = foldersTree.Select(x => x).FirstOrDefault();
            f.Selected = true;
            await OnFolderSelected(f);
        }
    }

    private void ToggleView()
    {
        viewMode = (viewMode == 0) ? 1 : 0;
    }

    private async Task OnFolderSelected(FolderInfoDto f)
    {
        folder = f;
        await LoadNotes();
    }

    private async Task LoadNotes()
    {
        notes = null;
        var httpResponse = await dataService.Get<Result<List<NoteInfoDto>>>("api/notes/GetByFolder/" + folder.FolderId.ToString());
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            notes = httpResponse.Response.Entity;
        }
    }

    private void Delete(NoteInfoDto item)
    {
        modalDialog.Show();
        itemDelete = item;
    }

    private async Task OnConfirmDelete()
    {
        modalDialog.Hide();

        var httpResponse = await dataService.Delete($"api/notes/{itemDelete.NoteId}");
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            await LoadNotes();
        }

        itemDelete = null;
    }

    private void OnCancelDelete()
    {
        modalDialog.Hide();
        itemDelete = null;
    }

    void GoNewNote()
    {
        navigationManager.NavigateTo($"notes/new");
    }

    void GoViewNote(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/{note.NoteId}");
    }

    void GoEditNote(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/edit/{note.NoteId}/tree");
    }

}

@page "/notes/filter"
@page "/notesfilter"

@inject IKntClientDataService  dataService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages

@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]

@*<div class="container-fluid">
    <div class="row">
        <div class="col-6">
            <h3>Notes filter</h3>
        </div>
        <div class="col-6 float-right">
            <button class="btn btn-sm btn-warning mx-1 float-right"
                    @onclick="GoNoteNew"
                    data-toggle="tooltip" title="New note">
                <i class="oi oi-bookmark"></i> New note
            </button>
        </div>
    </div>
</div>
<hr class="mt-0" />*@

<div class="row">

    <div class="col-lg-12 pt-2 bg-light border">

        <div class="row">
            <div class="col-8">
                <h5><span class="oi oi-basket pr-3"></span>Notes filter</h5>
            </div>
            <div class="col-4">
                @if (notes != null && notes.Count > 0)
                {
                    <span class="float-right">
                        @if (viewMode == 0)
                        {
                            <button class="btn btn-sm btn-dark mx-1"
                                    @onclick="ToggleView"
                                    data-toggle="tooltip" title="Item mode view">
                                <i class="fa fa-file-text-o"></i> Item mode view
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-dark mx-1"
                                    @onclick="ToggleView"
                                    data-toggle="tooltip" title="Table mode view">
                                <i class="fa fa-table"></i> Table mode view
                            </button>
                        }
                    </span>
                }
                else
                {
                    <span>&nbsp;</span>
                }
            </div>
        </div>
        
    </div>

    <div class="col-lg-3 pt-2 pb-2 bg-light border">
        @*<KntFoldersTreeView FoldersInfo="foldersTree" FolderSelected="OnFolderSelected" />*@
        <NotesFilterCriteria FilterSelected="OnFilterSelected" />
    </div>

    <div class="col-lg-9 pt-2 pb-2 border">
        @if (notes != null && notes.Count > 0)
        {
            <Pagination CurrentPage="currentPage" SelectedPage="onSelectedPage"
                        TotalPages="totalPages"></Pagination>
        }

        @if (viewMode == 0)
        {
            <NotesIndex Notes="notes" OnNoteDelete="GoNoteDelete" OnNoteEdit="GoNoteEdit" OnNoteView="GoNoteView"></NotesIndex>
        }
        else
        {
            <NotesList Notes="notes" OnNoteDelete="GoNoteDelete" OnNoteEdit="GoNoteEdit" OnNoteView="GoNoteView" />
        }
       
        @if (notes != null && notes.Count > 15)
        {
            <Pagination CurrentPage="currentPage" SelectedPage="onSelectedPage"
                        TotalPages="totalPages"></Pagination>
        }
    </div>
</div>

<ModalDialog @ref="modalDialog" Title="Delete note" onConfirm="OnConfirmDelete" onCancel="OnCancelDelete">
    <div><p>Are you sure you want to delete user "@itemDelete.Topic (@itemDelete.NoteNumber)" ?</p></div>
</ModalDialog>

@code {
    // private List<FolderInfoDto> foldersTree;
    private ModalDialog modalDialog;
    private NoteInfoDto itemDelete;

    private int viewMode = 0;

    List<NoteInfoDto> notes = new List<NoteInfoDto>();

    private NotesFilterDto filter;
    private int currentPage = 1;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void ToggleView()
    {
        viewMode = (viewMode == 0) ? 1 : 0;
    }

    private async Task OnFilterSelected(NotesFilterDto f)
    {
        filter = f;

        Console.WriteLine("Filter: " + filter.Topic);

        await onSelectedPage(1);
    }

    private async Task onSelectedPage(int page)
    {
        currentPage = page;
        await LoadNotesWithPagination();
    }

    private async Task LoadNotesWithPagination()
    {        
        notes = null;

        var httpResponse = await dataService.Post<NotesFilterDto, Result<List<NoteInfoDto>>>("api/notes/getfilter", filter );

        totalPages = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPages").FirstOrDefault());

        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            notes = httpResponse.Response.Entity;
        }
    }


    private async Task OnConfirmDelete()
    {
        modalDialog.Hide();

        var httpResponse = await dataService.Delete($"api/notes/{itemDelete.NoteId}");
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            await LoadNotesWithPagination();
        }

        itemDelete = null;
    }

    private void OnCancelDelete()
    {
        modalDialog.Hide();
        itemDelete = null;
    }

    private void GoNoteDelete(NoteInfoDto item)
    {
        modalDialog.Show();
        itemDelete = item;
    }

    //void GoNoteNew()
    //{
    //    navigationManager.NavigateTo($"notes/new");
    //}

    void GoNoteView(NoteInfoDto note)
    {
        // TODO: !!! note edit hay que modificarlo para permitir el regreso a este componente
        navigationManager.NavigateTo($"notes/{note.NoteId}");
    }

    void GoNoteEdit(NoteInfoDto note)
    {
        // TODO: !!! modificar la edición para contemplar el regreso a este componente
        navigationManager.NavigateTo($"notes/edit/{note.NoteId}/tree");
    }

}

@inject IShowMessages showMessages

<EditForm Model="Note" Context="formContext">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group row">
        <label for="atrTopic" class="col-sm-1 col-form-label">Topic:</label>
        <div class="input-group col-sm-11" id="atrTopic">
            <InputText class="form-control" @bind-Value="@Note.Topic" />
            <div class="input-group-append">
                <label class="btn btn-outline-secondary" data-toggle="tooltip" title="Note number (automatically assigned)">
                    #@Note.NoteNumber
                </label>
            </div>
        </div>
        <ValidationMessage For="@(() => Note.Topic)" />
    </div>

    <div class="form-group row">
        <label for="atrFolder" class="col-sm-1 col-form-label">Folder:</label>
        <div class="input-group col-sm-11"  id="atrFolder">
            <input type="text" disabled class="form-control" @bind="@Note.FolderDto.Name" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="@OnFolderSelector"
                        data-toggle="tooltip" title="Select folder">
                    ...&nbsp;<i class="fa fa-folder" aria-hidden="true"></i>
                </button>
            </div>
        </div>
        <ValidationMessage For="@(() => Note.FolderId)" />
    </div>

    <div class="form-group">
        <label>Tags:</label>
        <InputText class="form-control" @bind-Value="@Note.Tags" />
        <ValidationMessage For="@(() => Note.Tags)" />
    </div>

    <div class="form-group form-markdown">
        <InputMarkdown @bind-Value="@Note.Description"
                        For="@(() => Note.Description)" Label="Description:"></InputMarkdown>

    </div>

    <div class="form-group">
        <label>Priority:</label>
        <InputNumber class="form-control" @bind-Value="@Note.Priority" />
        <ValidationMessage For="@(() => Note.Priority)" />
    </div>

    <div class="form-group">
        <label>Note type:</label>
        <select class="form-control" @bind="@Note.NoteTypeId">
            @foreach (var ntype in NoteTypes)
            {
                <option value=@ntype.NoteTypeId>@ntype.Name</option>
            }
        </select>
        <ValidationMessage For="@(() => Note.NoteTypeId)" />
    </div>

    <div class="form-group">
        <label>Attributes:</label>
        <div>
            <NoteKAttributes Attributes="Note.KAttributesDto"></NoteKAttributes>
        </div>
    </div>

    <button class="btn btn-success" @onclick="(() => Save(formContext))">Save changes</button>

    <p> </p>
    <hr />

    <KntFolderSelector @ref="kntFolderSelector" OnCancel="onCancelFolderSelector" OnConfirm="onConfirmFolderSelector"></KntFolderSelector>

</EditForm>

@code {
    [Parameter] public NoteDto Note { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<NoteTypeInfoDto> NoteTypes { get; set; } = new List<NoteTypeInfoDto>();

    private KntFolderSelector kntFolderSelector;


    protected async Task Save(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {
            await showMessages.ShowErrorMessage("Incorrect data, check the required attributes.");
            return;
        }

        await OnValidSubmit.InvokeAsync(formContext);
    }

    #region Managment FolderSelector

    private void OnFolderSelector()
    {        
        kntFolderSelector.Show();
    }

    private void onConfirmFolderSelector(FolderInfoDto f)
    {     
        Note.FolderDto = f.GetSimpleDto<FolderDto>();
        Note.FolderId = f.FolderId;
        kntFolderSelector.Hide();
    }

    private void onCancelFolderSelector()
    {
        kntFolderSelector.Hide();     
    }

    #endregion

}

@page "/users"

@inject IKntClientDataService  dataService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages

@attribute [Authorize(Roles = "Admin")]

@*<div class="kpage-header mb-0">
    <div class="col-3">
        <h3>Users Index</h3>
    </div>
    <div class="col-9 float-right">
        <i class="oi oi-grid-three-up"></i>
        <button class="btn btn-sm btn-warning mx-1"
                @onclick="GoNewUser"
                data-toggle="tooltip" title="New user">
            <i class="oi oi-person"></i> New user
        </button>
    </div>
</div>
<hr class="mt-0" />*@

<div class="container-fluid">
    <div class="row">
        <div class="col-6">
            <h3>Users index</h3>
        </div>
        <div class="col-6 float-right">
            <button class="btn btn-sm btn-warning mx-1 float-right"
                    @onclick="GoNewUser"
                    data-toggle="tooltip" title="New user">
                <i class="oi oi-bookmark"></i> New user
            </button>
        </div>
    </div>
</div>
<hr class="mt-0" />

<Pagination CurrentPage="currentPage" SelectedPage="onSelectedPage"
            TotalPages="totalPages"></Pagination>

<EntityList List="users">
    <ItemsFull>
        <table class="table table-sm table-bordered table-striped">
            <thead>
                <tr>
                    <th width="140px">User Name</th>
                    <th>Full Name</th>
                    <th>Email</th>
                    <th>Roles</th>
                    <th width="100px" class="text-center">(Actions)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in users)
                {
                    <tr>
                        <td>@item.UserName</td>
                        <td>@item.FullName</td>
                        <td>@item.EMail</td>
                        <td>@item.RoleDefinition</td>
                        <td>
                            <span class="float-right">
                                <a href="users/edit/@item.UserId" class="btn btn-sm btn-warning mx-1"
                                   data-toggle="tooltip" title="Edit user">
                                    <i class="fa fa-pencil"></i>
                                </a>
                                <button class="btn btn-sm btn-danger mx-1"
                                        @onclick="@(() => Delete(item))"
                                        data-toggle="tooltip" title="Delete user">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </ItemsFull>
</EntityList>

<ModalDialog @ref="modalDialog" Title="Delete user" onConfirm="OnConfirmDelete" onCancel="OnCancelDelete">
    <div><p>Are you sure you want to delete user "@itemDelete.UserName (@itemDelete.FullName)" ?</p></div>
</ModalDialog>

@code {

    private List<UserInfoDto> users { get; set; }
    private ModalDialog modalDialog;
    private UserInfoDto itemDelete;
    private int currentPage = 1;
    private int totalPages;

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task onSelectedPage(int page)
    {
        currentPage = page;
        await Load(page);
    }

    private async Task Load(int page = 1)
    {
        var httpResponse = await dataService.Get<Result<List<UserInfoDto>>>($"api/users?page={page}");
        if (!httpResponse.Error)
        {
            users = httpResponse.Response.Entity;
            var count = httpResponse.HttpResponseMessage.Headers.GetValues("count").FirstOrDefault();
            totalPages = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPages").FirstOrDefault());
            Console.WriteLine($"count={count}  -- totalPages={totalPages}");
        }
        else
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
    }

    private void Delete(UserInfoDto item)
    {
        modalDialog.Show();
        itemDelete = item;
    }

    private async Task OnConfirmDelete()
    {
        modalDialog.Hide();

        var httpResponse = await dataService.Delete($"api/users/{itemDelete.UserId}");
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            users = null;
            await Load();
        }

        itemDelete = null;
    }

    private void OnCancelDelete()
    {
        modalDialog.Hide();
        itemDelete = null;
    }

    void GoNewUser()
    {
        navigationManager.NavigateTo($"users/new");
    }

}

@page "/types"

@inject IKntClientDataService  dataService
@inject NavigationManager navigationManger
@inject IShowMessages showMessages

<h3>Types Index</h3>

<div class="form-group">
    <a class="btn btn-info" href="types/new">New type</a>
</div>

<EntityList List="noteTypes">
    <ItemsFull>
        <table class="table table-sm table-bordered table-striped">
            <thead>
                <tr>
                    <th width="200px" >Key</th>
                    <th>Name</th>
                    <th width="100px" class="text-center">(Actions)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in noteTypes)
                {
                    <tr>
                        <td>@item.Key</td>
                        <td>@item.Name</td>
                        <td>
                            <span class="float-right">
                                <a href="types/edit/@item.NoteTypeId" class="btn btn-sm btn-warning mx-1"
                                   data-toggle="tooltip" title="Edit user">
                                    <i class="fa fa-pencil"></i>
                                </a>
                                <button class="btn btn-sm btn-danger mx-1"
                                        @onclick="@(() => Delete(item))"
                                        data-toggle="tooltip" title="Delete user">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </ItemsFull>
</EntityList>

<ModalDialog @ref="modalDialog" Title="Delete type" onConfirm="OnConfirmDelete" onCancel="OnCancelDelete">
    <div><p>Are you sure you want to delete type "@itemDelete.Name (@itemDelete.Key)" ?</p></div>
</ModalDialog>

@code {

    private List<NoteTypeInfoDto> noteTypes { get; set; }
    private ModalDialog modalDialog;
    private NoteTypeInfoDto itemDelete;

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var res = await dataService.Get<Result<List<NoteTypeInfoDto>>>("api/notetypes");
        noteTypes = res.Response.Entity;
    }

    private void Delete(NoteTypeInfoDto item)
    {
        modalDialog.Show();
        itemDelete = item;        
    }

    private async Task OnConfirmDelete()
    {
        modalDialog.Hide();

        var httpResponse = await dataService.Delete($"api/notetypes/{itemDelete.NoteTypeId}");
        Console.WriteLine($"ERROR: {httpResponse.Error}");
        if (httpResponse.Error)
        {
            Console.WriteLine(await httpResponse.GetBody());
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            await Load();
        }

        itemDelete = null;
    }

    private void OnCancelDelete()
    {
        modalDialog.Hide();
        itemDelete = null;        
    }

}

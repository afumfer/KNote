@page "/register"

@inject IKntClientDataService  dataService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages
@inject ILoginService loginService

@using KNote.Client.Auth

<h3>Register</h3>

<EditForm Model="@user" OnValidSubmit="CreateUser">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>User name:</label>
        <div>
            <InputText Class="form-control" @bind-Value="@user.UserName" />
            <ValidationMessage For="@(() => user.UserName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Full name:</label>
        <div>
            <InputText Class="form-control" @bind-Value="@user.FullName" />
            <ValidationMessage For="@(() => user.FullName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Email:</label>
        <div>
            <InputText Class="form-control" @bind-Value="@user.EMail" />
            <ValidationMessage For="@(() => user.EMail)" />
        </div>
    </div>

    <div class="form-group">
        <label>Password:</label>
        <div>
            <InputPassword Class="form-control" @bind-Value="@user.Password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Register</button>

</EditForm>

@code {
    private UserRegisterDto user = new UserRegisterDto();


    private async Task CreateUser()
    {
        user.RoleDefinition = "admin";

        Console.WriteLine(user.UserName);
        Console.WriteLine(user.EMail);
        Console.WriteLine(user.RoleDefinition);
        Console.WriteLine(user.FullName);

        Console.WriteLine(user.Password);


        // TODO: !!! Borrar esto ...
        //var httpResponse = await repositorio.Post<UserInfo2, UserToken2>("api/cuentas/crear", userInfo2);

        //if (httpResponse.Error)
        //{
        //    await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        //}
        //else
        //{
        //    await loginService.Login(httpResponse.Response.Token);
        //    navigationManager.NavigateTo("");
        //}

        var httpResponse = await dataService.Post<UserRegisterDto, Result<UserDto>>("api/users/register", user);
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            Console.WriteLine("user registred !!");
            //await loginService.Login(httpResponse.Response.XXXX);
            await showMessages.ShowOkMessage("User registred! Next you must login with your credentials.");
            navigationManager.NavigateTo("login");
        }

    }
}

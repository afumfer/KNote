@inherits InputTextArea
@using System.Linq.Expressions
@typeparam TValue

<div>

    <label>@labelMode&nbsp;&nbsp;&nbsp;&nbsp;</label>

    <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
        <button type="button" class="btn btn-light" data-toggle="tooltip" title="Show edit mode" @onclick="EditMode">
            <i class="fa fa-edit">&nbsp;&nbsp;Markdown edit mode</i>
        </button>
    </div>
    <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
        <button type="button" class="btn btn-light" data-toggle="tooltip" title="Show view mode" @onclick="ViewMode">
            <i class="fa fa-eye">&nbsp;&nbsp;Show view html</i>
        </button>
    </div>

    @if (editMode)
    {
        <div>
            <InputTextArea @bind-Value="CurrentValue" class="p-2" />
            <ValidationMessage For="For" />
        </div>
    }
    else
    {
        // TODO: Opcionalmente encuadrar el html en un contenedor, pendiente.

        @*<div class="markdown-container p-2" style="overflow: auto;">
            <ViewMarkdown MarkdownContent="@CurrentValue">

            </ViewMarkdown>
        </div>*@

        <div>
            <hr />
            <ViewMarkdown MarkdownContent="@CurrentValue">
            </ViewMarkdown>
            <hr />
        </div>
    }

</div>


@code {

    [Parameter] public Expression<Func<TValue>> For { get; set; }
    [Parameter] public string Label { get; set; }

    private string labelMode;
    private bool editMode = true;

    protected override void OnInitialized()
    {
        //labelMode = Label + " (markdown edit mode): ";
        labelMode = Label;
        base.OnInitialized();
    }

    private void EditMode()
    {
        editMode = true;
        //labelMode = Label + " (markdown edit mode): ";
    }

    private void ViewMode()
    {
        editMode = false;
        //labelMode = Label + " (preview mode): ";
    }
}

@inject IKntClientDataService  dataService
@inject IShowMessages showMessages

@if (ShowDialog)
{

    <EditForm Model="task" Context="formContextTask">

        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="modal-backdrop show"></div>

        <div class="modal fade show" id="taskModal" tabindex="-1"
             role="dialog" aria-labelledby="taskModalLabel"
             aria-hidden="true" style="display: block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content" style="width:800px">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">@Title</h5>
                        <button @onclick="OnCancel" type="button" class="close" data-dismiss="modal"
                                aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="overflow-auto" style="height:500px">

                            <div class="form-group row">
                                <label for="atrUserId" class="col-sm-2 col-form-label">User:</label>                                                                
                                <div class="input-group  col-sm-10" id="atrUserId">
                                    <select class="form-control col-sm-11" @bind="@task.UserId">
                                        @if (Users != null)
                                        {
                                            @foreach (var user in Users)
                                            {
                                                <option value=@user.UserId>@user.FullName</option>
                                            }
                                        }
                                    </select>
                                    <ValidationMessage For="@(() => task.UserId)" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label>Description:</label>
                                <InputTextArea class="form-control p-2" @bind-Value="@task.Description" />
                                <ValidationMessage For="@(() => task.Description)" />
                            </div>

                            <div class="form-group row">
                                <label for="atrTags" class="col-sm-2 col-form-label">Tags:</label>
                                <div class="input-group col-sm-10" id="atrTags">
                                    <InputText class="form-control" @bind-Value="@task.Tags" />
                                </div>
                                <ValidationMessage For="@(() => task.Tags)" />
                            </div>

                            <div class="form-group row">
                                <label for="atrPrority" class="col-sm-2 col-form-label">Prority:</label>
                                <div class="input-group col-sm-4" id="atrPrority">
                                    <InputNumber class="form-control" @bind-Value="@task.Priority" />
                                    <ValidationMessage For="@(() => task.Priority)" />
                                </div>
                                <label for="atrDifficulty" class="col-sm-2 col-form-label">Difficulty:</label>
                                <div class="input-group col-sm-4" id="atrDifficulty">
                                    <InputNumber class="form-control" @bind-Value="@task.DifficultyLevel" />
                                    <ValidationMessage For="@(() => task.DifficultyLevel)" />
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="atrExtStartDate" class="col-sm-2 col-form-label">Exp. Start:</label>
                                <div class="input-group col-sm-4" id="atrExtStartDate">
                                    <InputDate type="text" class="form-control" @bind-Value="@task.ExpectedStartDate" />
                                    <ValidationMessage For="@(() => task.ExpectedStartDate)" />
                                </div>
                                <label for="atrExpEndDate" class="col-sm-2 col-form-label">Exp. End:</label>
                                <div class="input-group col-sm-4" id="atrExpEndDate">
                                    <InputDate class="form-control" @bind-Value="@task.ExpectedEndDate" />
                                    <ValidationMessage For="@(() => task.ExpectedEndDate)" />
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="atrStartDate" class="col-sm-2 col-form-label">Start:</label>
                                <div class="input-group col-sm-4" id="atrStartDate">
                                    <InputDate type="text" class="form-control" @bind-Value="@task.StartDate" />
                                    <ValidationMessage For="@(() => task.StartDate)" />
                                </div>
                                <label for="atrEndDate" class="col-sm-2 col-form-label">Resolv:</label>
                                <div class="input-group col-sm-4" id="atrEndDate">
                                    <InputDate type="text" class="form-control" @bind-Value="@task.EndDate" />
                                    <ValidationMessage For="@(() => task.EndDate)" />
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="atrResolved" class="col-sm-2 col-form-label">Resolved:</label>
                                <div class="input-group col-sm-4" id="atrResolved">
                                    <InputCheckbox class="form-control" @bind-Value="@task.Resolved" />
                                </div>
                                <label for="atrSpentTime" class="col-sm-2 col-form-label">SpentTime:</label>
                                <div class="input-group col-sm-4 align-content-start" id="atrSpentTime">
                                    <InputNumber class="form-control" @bind-Value="@task.SpentTime" />
                                    <ValidationMessage For="@(() => task.SpentTime)" />
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button @onclick="OnCancel" type="button" class="btn btn-secondary"
                                data-dismiss="modal">
                            Cancel
                        </button>
                        <button @onclick="(() => _onConfirm(formContextTask))" type="button" class="btn btn-primary">Ok</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}
    
@code {
    [Parameter] public string Title { get; set; } = "KNote task editor";
    [Parameter] public EventCallback<NoteTaskDto> OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public List<UserDto> Users { get; set; }
    //[Parameter] public NoteTaskDto Task { get; set; }

    private NoteTaskDto task; // { get; set; } = new NoteTaskDto();

    private bool ShowDialog = false;

    public void Show(NoteTaskDto taskEdit)
    {
        if (taskEdit != null)
            task = taskEdit.GetSimpleDto<NoteTaskDto>();
        else
        {
            task = new NoteTaskDto();
            task.NoteTaskId = Guid.NewGuid();
        }

        ShowDialog = true;
    }

    public void Hide() => ShowDialog = false;

    private async Task _onConfirm(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {
            await showMessages.ShowErrorMessage("Incorrect data, check the required attributes.");
            return;
        }
    
        foreach (var u in Users)
        {
            if (u.UserId == task.UserId)
            {
                task.UserFullName = u.FullName;
                break;
            }
        }

        await OnConfirm.InvokeAsync(task);
    }

}

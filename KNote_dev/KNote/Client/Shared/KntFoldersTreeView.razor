@*@using KNote.Shared*@

@inject IKntClientDataService  dataService
@inject NavigationManager navigationManger
@inject IShowMessages showMessages

@if (FoldersInfo != null)
{
    @if (FoldersInfo.Count > 0)
    {
        <ul>
            @foreach (var folder in FoldersInfo)
            {
                <li>
                    @if (folder.ChildFolders.Count > 0)
                    {
                        <span class="@folder.getIcon() mr-1" @onclick="@folder.Toggle"></span>
                    }
                    else
                    {
                        <span class="mr-3"></span>
                    }

                    @*@if (folder.Selected == true)
                        {
                            folderOldSelected = folder;
                            <span >edit / delete </span>
                        }*@
                    <span class="@folder.getColor()  px-1 pt-1 pb-1 rounded" @onclick="@(() => onFolderSelected(folder))"> @folder.ShortName</span>
                    @if (folder.Selected == true)
                    {
                        folderOldSelected = folder;
                        <span>
                            <a href="folders/edit/@folder.FolderId" class="btn btn-sm btn-warning mx-1"
                               data-toggle="tooltip" title="Edit user">
                                <i class="fa fa-pencil"></i>
                            </a>
                            <button class="btn btn-sm btn-danger mx-1"
                                    @onclick="@(() => Delete(folder))"
                                    data-toggle="tooltip" title="Delete user">
                                <i class="fa fa-minus"></i>
                            </button>
                        </span>
                    }

                    @if (folder.Expanded)
                    {
                        <div>
                            <KntFoldersTreeView FoldersInfo="@folder.ChildFolders" FolderSelected="onFolderSelected"></KntFoldersTreeView>
                        </div>
                    }
                </li>
            }
        </ul>
    }
}

@code {
    [Parameter] public List<FolderInfoDto> FoldersInfo { get; set; }
    [Parameter] public EventCallback<FolderInfoDto> FolderSelected { get; set; }
    private FolderInfoDto folderOldSelected;

    protected async Task onFolderSelected(FolderInfoDto folder)
    {
        // Refresh component state (selected / no selected)

        if (folderOldSelected != null)
            folderOldSelected.Selected = false;

        folder.Selected = true;
        await FolderSelected.InvokeAsync(folder);
        folderOldSelected = folder;
    }

    private async Task Delete(FolderInfoDto item)
    {
        var httpResponse = await dataService.Delete($"api/folders/{item.FolderId}");
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            Console.WriteLine("---");
            //await OnFolderSelected(folder);
        }
    }

}
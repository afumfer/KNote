@inject IKntClientDataService  dataService
@inject IShowMessages showMessages

@if (ShowDialog)
{
    <div class="modal-backdrop show"></div>

    <div class="modal fade show" id="exampleModal" tabindex="-1"
         role="dialog" aria-labelledby="exampleModalLabel"
         aria-hidden="true" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@Title</h5>
                    <button @onclick="OnCancel" type="button" class="close" data-dismiss="modal"
                            aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="overflow-auto" style="height:350px">

                        <InputImg Label="Upload" ImageBase64="@resource.ContentBase64" OnSelectedImage="OnFileSelected" />


                    </div>
                </div>
                <div class="modal-footer">
                    <button @onclick="OnCancel" type="button" class="btn btn-secondary"
                            data-dismiss="modal">
                        Cancel
                    </button>
                    <button @onclick="_onConfirm" type="button" class="btn btn-primary">Ok</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Title { get; set; } = "KNote resource selector";
    [Parameter] public ResourceDto Resource { get; set; }
    [Parameter] public EventCallback<ResourceDto> OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private bool ShowDialog = false;
    private ResourceDto resource;

    public void Show() => ShowDialog = true;
    public void Hide() => ShowDialog = false;

    protected override void OnInitialized()
    {
        if (Resource != null)
        {
            Resource = new ResourceDto();
        }

        resource = Resource;

        base.OnInitialized();
    }

    private async Task OnFileSelected(string fileBase64)
    {
        resource.ContentBase64 = fileBase64;
        resource.Name = "KNote";
        resource.Description = "Description resource";

        var httpResponse = await dataService.Post("api/notes/savefile", resource);
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            Console.WriteLine("File upload created !!");
            await showMessages.ShowOkMessage("File upload!");
        }        
    }

    private async Task _onConfirm()
    {
        await OnConfirm.InvokeAsync(Resource);
    }
}
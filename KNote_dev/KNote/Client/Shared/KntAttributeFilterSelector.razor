@inject IKntClientDataService  dataService
@inject IShowMessages showMessages

@if (ShowDialog)
{
    <EditForm Model="atrSelected" Context="formContextAtr">

        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="modal-backdrop show"></div>

        <div class="modal fade show" id="treeFolderModal" tabindex="-1"
             role="dialog" aria-labelledby="treeFolderModalLabel"
             aria-hidden="true" style="display: block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">@Title</h5>
                        <button @onclick="OnCancel" type="button" class="close" data-dismiss="modal"
                                aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="overflow-auto" style="height:350px">

                            <div class="form-group row">
                                <label for="atrUserId" class="col-sm-2 col-form-label">Attribute:</label>
                                <div class="input-group  col-sm-10" id="atrUserId">
                                    <select class="form-control col-sm-11" @bind="@atrSelected.AtrId">
                                        <option></option>
                                        @if (listAtr != null)
                                        {
                                            @foreach (var atr in listAtr)
                                            {
                                                <option value=@atr.KAttributeId>@atr.Name</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <ValidationMessage For="@(() => atrSelected.AtrId)" />
                            </div>

                            <div class="form-group row">
                                <label for="atrTags" class="col-sm-2 col-form-label">Value:</label>
                                <div class="input-group col-sm-10" id="atrTags">
                                    <InputText class="form-control" @bind-Value="@atrSelected.Value" />
                                </div>
                                <ValidationMessage For="@(() => atrSelected.Value)" />
                            </div>


                        </div>
                    </div>
                    <div class="modal-footer">
                        <button @onclick="OnCancel" type="button" class="btn btn-secondary"
                                data-dismiss="modal">
                            Cancel
                        </button>
                        <button @onclick="(() => _onConfirm(formContextAtr))" type="button" class="btn btn-primary">Ok</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter] public string Title { get; set; } = "Attribute filter selector";
    [Parameter] public AtrFilterDto AtrFilterDto { get; set; }
    [Parameter] public EventCallback<AtrFilterDto> OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private bool ShowDialog = false;

    private AtrFilterDto atrSelected; ///  = new AtrFilterDto();
    private List<KAttributeInfoDto> listAtr;

    public void Hide() => ShowDialog = false;

    public void Show() 
    {
        atrSelected = new AtrFilterDto();
        ShowDialog = true; 
    }

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await dataService.Get<Result<List<KAttributeInfoDto>>>($"api/kattributes");
        if (!httpResponse.Error)
        {
            listAtr = httpResponse.Response.Entity;
        }
        else
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }

        await base.OnInitializedAsync();
    }

    private async Task _onConfirm(EditContext formContext)
    {
        //var atrSelected = new AtrFilterDto { AtrKey = "HU", AtrName = "Historia de usuario", Value = "" };

        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {
            await showMessages.ShowErrorMessage("Incorrect data, check the required attributes.");
            return;
        }

        atrSelected.AtrName = listAtr.Where(_ => _.KAttributeId == atrSelected.AtrId).Select(_ => _.Name).FirstOrDefault();

        await OnConfirm.InvokeAsync(atrSelected);
    }
}

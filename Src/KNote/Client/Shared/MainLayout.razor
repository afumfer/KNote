@inherits LayoutComponentBase

@implements IDisposable

@inject IStore store
@inject NotificationService notificationService

<RadzenDialog/>
<RadzenNotification/>
<RadzenContextMenu/>
<RadzenTooltip/>

<RadzenLayout>

    <RadzenHeader>
        <div class="row justify-content-start align-items-center">
            <div class="col-5 d-flex align-items-center">
                <RadzenSidebarToggle Click="@(() => sidebar = !sidebar)" />                    
                <RadzenLabel Text="@KntConst.AppName" Style="font-size:large" />
            </div>
            <div class="col-7 d-flex align-items-center justify-content-end">
                <MainLayoutHeader />
            </div>
        </div>        
    </RadzenHeader>

    <RadzenBody>        
        @Body
    </RadzenBody>

    <RadzenSidebar @bind-Expanded="@sidebar">
        <MainLayoutNavMenu />
    </RadzenSidebar>

    <RadzenFooter class="p-1 ml-1 mr-1">
        <MainLayoutFooter TextLeft="@($"{KntConst.AppName} - v{store.AppState.AppVersion}")"
                          TextRight="@KntConst.AppDescription" />
    </RadzenFooter>

</RadzenLayout>

@code {

    private bool sidebar;    

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        store.AppState.OnChange += StateHasChanged;
        store.AppState.OnNotifyError += NotifyError;
        store.AppState.OnNotifySuccess += NotifySuccess;

        await store.ChatStartAsync();
    }

    public void Dispose()
    {
        store.AppState.OnChange -= StateHasChanged;
        store.AppState.OnNotifyError -= NotifyError;
        store.AppState.OnNotifySuccess -= NotifySuccess;
    }

    private void NotifyError(string summary, string details)
    {
        notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = summary, Detail = details, Duration = 12000 });
    }

    private void NotifySuccess(string summary, string details)
    {
        notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = summary, Detail = details, Duration = 3000 });
    }
}
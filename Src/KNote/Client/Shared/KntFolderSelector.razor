@inject AppState appState
@inject IKntClientDataService  dataService

@if (ShowDialog)
{
    <div class="modal-backdrop show"></div>

    <div class="modal fade show" id="treeFolderModal" tabindex="-1"
         role="dialog" aria-labelledby="treeFolderModalLabel"
         aria-hidden="true" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@Title</h5>
                    <button @onclick="OnCancel" type="button" class="close" data-dismiss="modal"
                            aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="overflow-auto" style="height:350px">
                        <KntFoldersTreeView FoldersInfo="@foldersTree"
                                            FolderSelected="OnFolderSelected">
                        </KntFoldersTreeView>
                    </div>
                </div>
                <div class="modal-footer">
                    <button @onclick="OnCancel" type="button" class="btn btn-secondary"
                            data-dismiss="modal">
                        Cancel
                    </button>
                    <button @onclick="_onConfirm" type="button" class="btn btn-primary">Ok</button>
                </div>
            </div>
        </div>
    </div>
}

@code {    

    [Parameter] public string Title { get; set; } = "KaNote folder selector";
    [Parameter] public EventCallback<FolderDto> OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private List<FolderDto> foldersTree;
    private bool ShowDialog = false;
    private FolderDto folderSelected;

    public void Show() => ShowDialog = true;
    public void Hide() => ShowDialog = false;

    protected override async Task OnInitializedAsync()
    {
        appState.OnChange += StateHasChanged;
        if (foldersTree == null)
        {
            if (appState.FoldersTree == null)
            {
                var res = await dataService.Get<Result<List<FolderDto>>>("api/folders/gettree");
                foldersTree = res.Response.Entity;
                appState.FoldersTree = foldersTree;

                if (foldersTree?.Count > 0)
                {
                    var f = foldersTree.Select(x => x).FirstOrDefault();
                    f.Selected = true;
                    OnFolderSelected(f);
                }
            }
            else
            {
                foldersTree = appState.FoldersTree;
                OnFolderSelected(appState.SelectedFolder.GetSimpleDto<FolderDto>());
            }
        }
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private void OnFolderSelected(FolderDto f)
    {
        folderSelected = f;
    }

    private async Task _onConfirm()
    {
        await OnConfirm.InvokeAsync(folderSelected);
    }
}
@implements IDisposable

@inject IStore store
@inject TooltipService tooltipService


<RadzenTree Data=@FoldersInfo Change=@OnFolderSelected>
    <RadzenTreeLevel 
        TextProperty="Name" 
        ChildrenProperty="ChildFolders"     
        Expanded=@ShouldExpanded 
        Selected=@ShouldSelected
        HasChildren=@(f => ((FolderDto)f).ChildFolders.Any()) >
            <Template>       
                <RadzenIcon Icon="folder" Style="color: lightgray"/> @context.Text
                @if (EditMode)
                {
                    <span>
                        <div class="pl-3" style="font-size:10px">
                            <RadzenIcon Icon="edit" @onclick="@(() => OnFolderEdit((FolderDto)context.Value))"
                                MouseEnter="@(args => tooltipService.Open(args, "Edit folder ...", new TooltipOptions(){ Position = TooltipPosition.Top }) )" Class="mr-0 mb-0" />
                            <RadzenIcon Icon="delete" @onclick="@(() => OnFolderDelete((FolderDto)context.Value))"
                                MouseEnter="@(args => tooltipService.Open(args, "Delete folder ...", new TooltipOptions(){ Position = TooltipPosition.Right }) )" />
                        </div>
                    </span>                    
                }
        </Template>
    </RadzenTreeLevel>            
</RadzenTree>


@code {
    [Parameter] public List<FolderDto> FoldersInfo { get; set; } = null!;
    [Parameter] public EventCallback<FolderDto> FolderSelected { get; set; }
    [Parameter] public EventCallback<FolderDto> FolderDelete { get; set; }
    [Parameter] public EventCallback<FolderDto> FolderEdit { get; set; }
    [Parameter] public bool EditMode { get; set; }    

    private AppState appState = null!;

    protected override void OnInitialized()
    {
        appState = store.AppState;
        appState.OnChange += StateHasChanged;

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (FoldersInfo is null)
            FoldersInfo = new List<FolderDto>();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private async Task OnFolderSelected(TreeEventArgs args)
    {
        var folder = args.Value as FolderDto;
        await FolderSelected.InvokeAsync(folder);
    }

    private async Task OnFolderDelete(FolderDto folder)
    {
        await FolderDelete.InvokeAsync(folder);
    }

    private async Task OnFolderEdit(FolderDto folder)
    {
        await FolderEdit.InvokeAsync(folder);
    }

    private bool ShouldSelected(object data)
    {
        if (appState.SelectedFolder is null)
            return false;

        if(string.IsNullOrEmpty(appState.SelectedFolder.Name))
            return false; 

        var folder = data as FolderDto;
        return folder?.Name == appState.SelectedFolder.Name;              
    }

    // TODO: !!! refactor (is not working when level folder > 1)
    private bool ShouldExpanded(object data)
    {
        if(!appState.IsSelectedFolder())
            return false; 

        if(appState.SelectedFolder?.ParentId is null)
            return false; 

        var folder = data as FolderDto;
        return folder?.FolderId == appState.SelectedFolder.ParentId;        
    }
}
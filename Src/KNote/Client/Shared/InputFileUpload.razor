@using System.IO

@inject IJSRuntime JSRuntime

@implements IAsyncDisposable

<div>
    <label>Click or drag & drop in next control:</label>
    <p />
    <div>
        <InputFile OnChange="LoadFile" @ref="inputFile" />
    </div>
    <p />
</div>

<div @ref="fileDropContainer">
    @if (imgSrc != null)
    {
        <hr />
        <div>
            <div style="margin:10px">
                <img src="@imgSrc" style="width: @(imgWidth)px;" />
            </div>
        </div>
        <hr />
    }
    else
    {
        <p>or copy & paste here ...</p>
    }    
</div>

@code {
    [Parameter] public EventCallback<KntFileInfo> OnSelectedFile { get; set; }
    [Parameter] public string? ContentBase64 { get; set; }

    private InputFile inputFile = null!;
    private ElementReference fileDropContainer;

    private KntFileInfo? fileSelected;

    private string? imgSrc;
    private int imgWidth = 50;

    private IJSObjectReference _filePasteModule = null!;
    private IJSObjectReference _filePasteFunctionReference = null!;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(ContentBase64))
        {
            imgSrc = "data:image/jpeg;base64, " + ContentBase64;
        }
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _filePasteModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/filePaste.js");

            _filePasteFunctionReference = await _filePasteModule.InvokeAsync<IJSObjectReference>("initializeFilePaste", fileDropContainer, inputFile.Element);
        }
    }

    async Task LoadFile(InputFileChangeEventArgs e)    
    {
        foreach(var file in e.GetMultipleFiles())
        {
            try
            {                    
                using var stream = file.OpenReadStream(KntConst.MaxLenResourceFile);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);

                ContentBase64 = Convert.ToBase64String(ms.ToArray());

                fileSelected = new KntFileInfo
                    {
                        Name = file.Name,
                        Type = file.ContentType,
                        Size = file.Size,
                        LastModifiedDate = file.LastModified.DateTime,
                        ContentBase64 = ContentBase64
                    };

                if (fileSelected.Type == "image/jpeg")
                {
                    imgWidth = 400;
                    imgSrc = "data:image/jpeg;base64, " + ContentBase64;
                }
                else if (fileSelected.Type == "application/pdf")
                {
                    imgWidth = 50;
                    imgSrc = @"https://upload.wikimedia.org/wikipedia/commons/8/87/PDF_file_icon.svg";
                }
                else
                    imgSrc = @"https://img.icons8.com/ios/50/000000/document-1.png";

                await OnSelectedFile.InvokeAsync(fileSelected);
                StateHasChanged();

            }
            catch (Exception)
            {
                // TODO: Write in log ...
                throw;
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_filePasteFunctionReference != null)
        {
            await _filePasteFunctionReference.InvokeVoidAsync("dispose");
            await _filePasteFunctionReference.DisposeAsync();
        }

        if (_filePasteModule != null)
        {
            await _filePasteModule.DisposeAsync();
        }
    }
}

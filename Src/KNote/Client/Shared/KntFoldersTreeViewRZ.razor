@inject AppState appState

@implements IDisposable

@if (ShowRefreshTree)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-10">
                <h5>Folders catalog</h5>
            </div>
            <div class="col-2 float-right">
                <button class="btn btn-sm btn-success mb-0 float-right"
                        @onclick="OnRefreshTreeFolders"
                        data-toggle="tooltip" title="Refresh tree folders">
                    <i class="fa fa-refresh"></i>
                </button>
            </div>
        </div>
    </div>
    <hr class="mt-1" />
}

@*<KntFoldersTreeNode FoldersInfo="@FoldersInfo"
                    FolderSelected="OnFolderSelected"
                    EditMode="EditMode"
                    FolderDelete="OnFolderDelete"
                    FolderEdit="OnFolderEdit">
</KntFoldersTreeNode>*@

@*Style="height: 300px"*@

<RadzenTree Data=@FoldersInfo  Change=@OnChange>
    <RadzenTreeLevel 
        TextProperty="Name" 
        ChildrenProperty="ChildFolders"  
        Expanded=@ShouldExpand 
        HasChildren=@(f => (f as FolderDto).ChildFolders.Any()) >
            <Template>       
                <RadzenIcon Icon="folder" Style="color: lightgray"/> @context.Text
           </Template>
    </RadzenTreeLevel>            
</RadzenTree>


@code {

    [Parameter] public List<FolderDto> FoldersInfo { get; set; }
    [Parameter] public EventCallback<FolderDto> FolderSelected { get; set; }
    [Parameter] public EventCallback<FolderDto> FolderDelete { get; set; }
    [Parameter] public EventCallback<FolderDto> FolderEdit { get; set; }
    [Parameter] public EventCallback RefreshTreeFolders { get; set; }
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public bool ShowRefreshTree { get; set; }

    protected override void OnInitialized()
    {
        appState.OnChange += StateHasChanged;

        base.OnInitialized();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    protected async Task OnFolderSelected(FolderDto folder)
    {
        await FolderSelected.InvokeAsync(folder);
    }

    private async Task OnFolderDelete(FolderDto folder)
    {
        await FolderDelete.InvokeAsync(folder);
    }

    private async Task OnFolderEdit(FolderDto folder)
    {
        await FolderEdit.InvokeAsync(folder);
    }

    private async Task OnRefreshTreeFolders()
    {
        await RefreshTreeFolders.InvokeAsync(null);
    }

    bool ShouldExpand(object data)
    {
        // TODO: !!! expandir la carpeta por defecto. 
        var folder = data as FolderDto;
        return folder.Name == "Tareas Resueltas";
    }

    async void OnChange(TreeEventArgs args)
    {
        var folder = args.Value as FolderDto;
        await FolderSelected.InvokeAsync(folder);        
    }

    RenderFragment<RadzenTreeItem> NodeFolderTemplate = (context) => builder =>
        {
            builder.OpenComponent<RadzenIcon>(0);
            builder.AddAttribute(1, "folder");
            builder.CloseComponent();        
            builder.AddContent(1, context.Text);
        };

}
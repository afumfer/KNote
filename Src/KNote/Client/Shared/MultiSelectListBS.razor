@inject IShowMessages showMessages

<div class="container-fluid">
    <div class="row">
        <div class="col-10">
            <div id="MultiSelectCheck">
                @foreach (var item in Items)                       
                {
                    @if (item.Selected)
                    {
                        <div>
                            <label>                                                              
                                <input type="checkbox" id="@item.Key" checked="checked" onclick="return false;" />
                                @item.Value                                
                            </label>
                        </div>
                    }
                 }
            </div>
        </div>
        <div class="col-2 float-right">
            <button class="btn btn-sm btn-warning mx-1 float-right"
                    @onclick="SelectTags" data-toggle="tooltip" title="Select tags">
                 ...
            </button>            
        </div>
    </div>
</div>

<ModalDialog @ref="modalDialog" Title="Select tags values" onClose="OnCancelSelectTags" Mode="1">
    <div id="MultiSelectCheck" class="overflow-auto" style="height: 200px;">
        @foreach (var item in Items)
        {
            <div>
                <label for="@item.Value">
                    @if (item.Selected)
                    {
                        <input type="checkbox" id="@item.Key" checked="checked" @onchange="@((e) => CheckboxChanged(e, item.Key))" />
                    }
                    else
                    {
                        <input type="checkbox" id="@item.Key" @onchange="@((e) => CheckboxChanged(e, item.Key))" />
                    }
                    @item.Value
                </label>
            </div>
        }
    </div>
</ModalDialog>

@code
{
    [Parameter] public List<MultiSelectListDto> Items { get; set; } = null!;
    [Parameter] public EventCallback<MultiSelectListDto> OnItemChange { get; set; }

    private ModalDialog modalDialog;

    private async Task CheckboxChanged(ChangeEventArgs e, string key)
    {
        var i = this.Items.FirstOrDefault(i => i.Key == key);
        if (i != null)
        {
            //i.Selected = (bool)e.Value;
            i.Selected = !i.Selected;
        }
        await OnItemChange.InvokeAsync(i);
    }


    private void SelectTags()
    {
        modalDialog.Show();
    }

    private void OnCancelSelectTags()
    {
        modalDialog.Hide();
    }

}

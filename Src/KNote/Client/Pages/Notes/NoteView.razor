@page "/notes/{NoteId}/{PageReturn}"

@inject IStore store
@inject TooltipService tooltipService
@inject DialogService dialogService

@*@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]*@

<ToolingHeader Title="Note view">
    <Buttons>            
        <RadzenButton Icon="logout" Click="() => OnExit()" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"  />  
    </Buttons>
</ToolingHeader>

@if (note != null)
{
    <RadzenCard >
        <div>
            <h4 class="h4">@note.Topic</h4>
        </div>
        <hr />
        <div class="bg-white p-2">
            <p>@((MarkupString)note.Description)</p>
        </div>
        <hr />
        <div>
            <i>
                <p>Tags: @(note.Tags)</p>
                <p>Creation date: @(note.CreationDateTime)</p>
                <p>Modification date: @(note.ModificationDateTime)</p>
            </i>
        </div>
    </RadzenCard>
}
else
{
    <text>Loading ... </text>
}


@code {
    [Parameter] public string NoteId { get; set; }
    [Parameter] public string PageReturn { get; set; }

    private NoteDto note;

    protected async override Task OnInitializedAsync()
    {
        var result = await store.Notes.GetAsync(Guid.Parse(NoteId));
        if (!result.IsValid)
        {            
            store.NavigateTo("index");
        }
        else
        {
            note = result.Entity;
        }

        base.OnInitialized();
    }

    private void OnExit()
    {
        store.NavigateTo(PageReturn);
    }

}

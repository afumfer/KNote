@inject IWebApiService webApiService
@inject IShowMessages showMessages
@inject NavigationManager navigationManger

<EditForm Model="notesFilter" Context="formContext" class="mb-3">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <!-- Title -->
    <div class="container-fluid">
        <div class="row">
            @*<div class="col-6">
                    /// TODO: selector criteria saved
                </div>*@
            <div class="col-12 mb-2">
                <button class="btn btn-success float-right mx-1 mt-1" @onclick="(() => ApplyFilter(formContext))">Apply</button>
                <button class="btn btn-info float-right mx-1 mt-1" @onclick="(() => ClearFilter(formContext))">Clear</button>
            </div>
        </div>
    </div>
    <hr class="mt-1" />

    <div class="form-group">
        <label>Topic:</label>
        <InputText class="form-control" @bind-Value="@notesFilter.Topic" />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputText class="form-control" @bind-Value="@notesFilter.Description" />
    </div>

    <div class="form-group">
        <label>Tags:</label>
        <InputText class="form-control" @bind-Value="@notesFilter.Tags" />
    </div>

    <div class="form-group">
        <label>Note type:</label>
        <select class="form-control" @bind="@notesFilter.NoteTypeId">
            <option></option>
            @foreach (var ntype in noteTypes)
            {
                <option value=@ntype.NoteTypeId>@ntype.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>Folder:</label>
        <div class="input-group mb-3">
            <input type="text" disabled class="form-control" @bind="@folderName" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="@OnResetFolder"
                        data-toggle="tooltip" title="Reset parent folder">
                    X
                </button>
                <button class="btn btn-outline-secondary" type="button" @onclick="@OnFolderSelector"
                        data-toggle="tooltip" title="Select folder">
                    ...&nbsp;<i class="fa fa-folder" aria-hidden="true"></i>
                </button>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label>Atributes:</label>
        <span class="float-right">
            <button class="btn btn-sm btn-light mr-2"
                    @onclick="@(() => OnAtrNew())"
                    data-toggle="tooltip" title="Add new attribute filter">
                <i class="fa fa-plus"></i>
            </button>
        </span>
        <table class="table table-sm table-bordered table-striped">
            <tbody>
                @foreach (var atr in notesFilter.AttributesFilter)
                {
                    <tr>
                        <td>@atr.AtrName</td>
                        <td>@atr.Value</td>
                        <td>
                            <span class="float-right">
                                <button class="btn btn-sm btn-light mx-1"
                                        @onclick="@(() => OnAtrDelete(atr))"
                                        data-toggle="tooltip" title="Delete attribute filter">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</EditForm>

<KntFolderSelector @ref="kntFolderSelector" OnCancel="OnCancelFolderSelector" OnConfirm="OnConfirmFolderSelector"></KntFolderSelector>

<KntAttributeFilterSelector @ref="kntAttributeFilterSelector" OnCancel="OnCancelAtrFilterSelector" OnConfirm="OnConfirmAtrFilterSelector" />

@code {
    [Parameter] public EventCallback<NotesFilterDto> FilterSelected { get; set; }

    private NotesFilterDto notesFilter = new NotesFilterDto();
    private List<NoteTypeDto> noteTypes = new List<NoteTypeDto>();
    private string folderName = "";

    private KntFolderSelector kntFolderSelector;
    private KntAttributeFilterSelector kntAttributeFilterSelector;

    protected async override Task OnInitializedAsync()
    {
        var result = await webApiService.NoteTypes.GetAllAsync();
        if (!result.IsValid)
        {
            await showMessages.ShowErrorMessage(result.Message);
            navigationManger.NavigateTo("/");
        }
        else
        {
            noteTypes = result.Entity;
        }

        await base.OnInitializedAsync();
    }

    protected async Task ApplyFilter(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {
            await showMessages.ShowErrorMessage("Incorrect data, check the required attributes.");
            return;
        }

        await FilterSelected.InvokeAsync(notesFilter);
    }

    protected async Task ClearFilter(EditContext formContext)
    {
        notesFilter.Topic = null;
        notesFilter.NoteTypeId = null;
        notesFilter.Tags = null;
        notesFilter.FolderId = null;
        notesFilter.Description = null;
        notesFilter.AttributesFilter = new List<AtrFilterDto>();

        await FilterSelected.InvokeAsync(notesFilter);
    }

    #region Managment FolderSelector

    private void OnFolderSelector()
    {
        kntFolderSelector.Show();
    }

    private void OnConfirmFolderSelector(FolderDto f)
    {
        notesFilter.FolderId = f.FolderId;
        folderName = f.Name;
        kntFolderSelector.Hide();
    }

    private void OnCancelFolderSelector()
    {
        kntFolderSelector.Hide();
    }

    private void OnResetFolder()
    {
        notesFilter.FolderId = null;
        folderName = "";
    }

    #endregion

    #region Attribute filter selector

    private void OnAtrDelete(AtrFilterDto atr)
    {
        notesFilter.AttributesFilter.Remove(atr);
    }

    private void OnAtrNew()
    {
        kntAttributeFilterSelector.Show();
    }

    private void OnConfirmAtrFilterSelector(AtrFilterDto atr)
    {
        notesFilter.AttributesFilter.Add(atr);
        kntAttributeFilterSelector.Hide();
    }

    private void OnCancelAtrFilterSelector()
    {
        kntAttributeFilterSelector.Hide();
    }

    #endregion

}

@inject IStore store
@inject NavigationManager navigationManger
@inject DialogService dialogService
@inject NotificationService notificationService


<EditForm Model="notesFilter" Context="formContext" class="mb-3">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group">
        <label>Topic:</label>
        <InputText class="form-control" @bind-Value="@notesFilter.Topic" />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputText class="form-control" @bind-Value="@notesFilter.Description" />
    </div>

    <div class="form-group">
        <label>Tags:</label>
        <InputText class="form-control" @bind-Value="@notesFilter.Tags" />
    </div>

    <div class="form-group">
        <label>Note type:</label>
        <select class="form-control" @bind="@notesFilter.NoteTypeId">
            <option></option>
            @foreach (var ntype in noteTypes)
            {
                <option value=@ntype.NoteTypeId>@ntype.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>Folder:</label>
        <div class="input-group mb-3">
            <input type="text" disabled class="form-control" @bind="@folderName" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="@OnResetFolder"
                        data-toggle="tooltip" title="Reset parent folder">
                    X
                </button>
                <button class="btn btn-outline-secondary" type="button" @onclick="@OnFolderSelector"
                        data-toggle="tooltip" title="Select folder">
                    ...&nbsp;<i class="fa fa-folder" aria-hidden="true"></i>
                </button>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label>Atributes:</label>
        <span class="float-right">
            <button class="btn btn-sm btn-light mr-2"
                    @onclick="@(() => OnAtrNew())"
                    data-toggle="tooltip" title="Add new attribute filter">
                <i class="fa fa-plus"></i>
            </button>
        </span>
        <table class="table table-sm table-bordered table-striped">
            <tbody>
                @foreach (var atr in notesFilter.AttributesFilter)
                {
                    <tr>
                        <td>@atr.AtrName</td>
                        <td>@atr.Value</td>
                        <td>
                            <span class="float-right">
                                <button class="btn btn-sm btn-light mx-1"
                                        @onclick="@(() => OnAtrDelete(atr))"
                                        data-toggle="tooltip" title="Delete attribute filter">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <hr class="mt-1" />
    <div class="row">
        <div class="col-12 text-right">
            <RadzenButton Text="Apply" Icon="filter_alt" Click="() => ApplyFilter(formContext)" ButtonStyle="ButtonStyle.Primary" Class="mr-1"  />  
            <RadzenButton Text="Clean" Icon="cleaning_services" Click="() => ClearFilter(formContext)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" />  
        </div>
    </div>
    
</EditForm>


@code {
    [Parameter] public EventCallback<NotesFilterDto> FilterSelected { get; set; }

    private NotesFilterDto notesFilter = new NotesFilterDto();
    private List<NoteTypeDto> noteTypes = new List<NoteTypeDto>();
    private string folderName = "";

    protected async override Task OnInitializedAsync()
    {
        var result = await store.NoteTypes.GetAllAsync();
        //if (!result.IsValid)
        //{
        //    notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Loading note types.", Detail =  result.Message, Duration = 12000 });
        //    navigationManger.NavigateTo("index");
        //}
        //else
        //{
        //    noteTypes = result.Entity;
        //}
        if (!result.IsValid)
        {            
            navigationManger.NavigateTo("index");
        }
        else
        {
            noteTypes = result.Entity;
        }

        await base.OnInitializedAsync();
    }

    protected async Task ApplyFilter(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Apply filter.", Detail =  "Incorrect data, check the required attributes.", Duration = 12000 });
            return;
        }

        await FilterSelected.InvokeAsync(notesFilter);
    }

    protected async Task ClearFilter(EditContext formContext)
    {
        notesFilter.Topic = null;
        notesFilter.NoteTypeId = null;
        notesFilter.Tags = null;
        notesFilter.FolderId = null;
        notesFilter.Description = null;
        notesFilter.AttributesFilter = new List<AtrFilterDto>();             
        folderName = "";

        await FilterSelected.InvokeAsync(notesFilter);
    }
    
    private async Task OnFolderSelector()
    {        
        var res = await dialogService.OpenAsync<KntFolderSelector>($"Folder selector",
               new Dictionary<string, object>() {  },
               new DialogOptions() { Width = "700px", Height = "520px"});        

        if(res != null)
        {
            var f = (FolderDto)res;
            notesFilter.FolderId = f.FolderId;
            folderName = f.Name;
        }        
    }

    private void OnResetFolder()
    {
        notesFilter.FolderId = null;
        folderName = "";
    }

    private void OnAtrDelete(AtrFilterDto atr)
    {
        notesFilter.AttributesFilter.Remove(atr);
    }

    private async Task OnAtrNew()
    {
        var res = await dialogService.OpenAsync<NoteKAttributeFilterSelector>($"Attribute filter selector",
               new Dictionary<string, object>() { { "Attribute", new AtrFilterDto() } },
               new DialogOptions() { Width = "700px", Height = "270px"});        

        if(res != null)
        {
            var atr = (AtrFilterDto)res;
            notesFilter.AttributesFilter.Add(atr);
        }  
    }

}

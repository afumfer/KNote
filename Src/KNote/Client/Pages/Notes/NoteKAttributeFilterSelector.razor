@inject IStore store
@inject DialogService dialogService
@inject NotificationService notificationService


<EditForm Model="Attribute" Context="formContextAtr">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group row">
        <label for="atrUserId" class="col-sm-2 col-form-label">Attribute:</label>
        <div class="input-group  col-sm-10" id="atrUserId">
            <select class="form-control col-sm-11" @bind="@Attribute.AtrId">
                <option></option>
                @if (listAtr != null)
                {
                    @foreach (var atr in listAtr)
                    {
                        <option value=@atr.KAttributeId>@atr.Name</option>
                    }
                }
            </select>
        </div>
        <ValidationMessage For="@(() => Attribute.AtrId)" />
    </div>

    <div class="form-group row">
        <label for="atrTags" class="col-sm-2 col-form-label">Value:</label>
        <div class="input-group col-sm-10" id="atrTags">
            <InputText class="form-control" @bind-Value="@Attribute.Value" />
        </div>
        <ValidationMessage For="@(() => Attribute.Value)" />
    </div>

    <hr class="mt-1" />
    <div class="row">
        <div class="col-12 text-right">
            <RadzenButton Text="Ok" Click="() => OnConfirm(formContextAtr)" ButtonStyle="ButtonStyle.Primary" Class="mr-1"  />  
            <RadzenButton Text="Cancel" Click="() => OnCancel()" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" />  
        </div>
    </div>
 
</EditForm>


@code {
    [Parameter] public AtrFilterDto Attribute { get; set; }

    private List<KAttributeInfoDto> listAtr;

    protected override async Task OnInitializedAsync()
    {
        var result = await store.KAttributes.GetAllAsync();
        if (result.IsValid)
            listAtr = result.Entity;

        if(Attribute == null)
            Attribute = new AtrFilterDto();
      
        await base.OnInitializedAsync();
    }

    private void OnConfirm(EditContext formContext)
    {        
        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Loading attribute info.", Detail = "Incorrect data, check the required attributes.", Duration = 12000 });
            return;
        }

        Attribute.AtrName = listAtr.Where(_ => _.KAttributeId == Attribute.AtrId).Select(_ => _.Name).FirstOrDefault();
        
        dialogService.Close(Attribute);
    }

    private void OnCancel()
    {        
        dialogService.Close(null);
    }
}

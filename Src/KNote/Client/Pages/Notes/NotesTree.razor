@page "/notes/tree"
@page "/tree"

@inject AppState appState
@inject IWebApiService webApiService
@inject NavigationManager navigationManager
@inject TooltipService tooltipService
@inject DialogService dialogService
@inject NotificationService notificationService

@implements IDisposable

@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]

<div class="col-lg-12 border">
    <div class="row">
        <div class="col-6">                    
            @if(folder != null)
            {
                <h4 class="mt-2"><span class="oi oi-folder pr-2"></span> @folder.Name</h4>
            }
            else
            {
                <h4 class="mt-2">( No folder selected )</h4>
            }                    
        </div>
        <div class="col-6 pr-0">
            <span class="float-right">
                <RadzenMenu>
                    <RadzenMenuItem Text="New note" Icon="post_add"  Click="OnNew"></RadzenMenuItem>
                    <RadzenMenuItem Text="Refresh tree" Icon="refresh"  Click="RefreshTreeFolders" ></RadzenMenuItem>
                    <RadzenMenuItem Text="Display options" Icon="tune">
                        @if (viewMode == 0)
                        {                                 
                            <RadzenMenuItem Text="Item view" Click="ToggleView"></RadzenMenuItem>                                        
                        }
                        else
                        {                                    
                            <RadzenMenuItem Text="Table view" Click="ToggleView"></RadzenMenuItem>                        
                        }            
                    </RadzenMenuItem>
                </RadzenMenu>
            </span>
        </div>
    </div>        
</div>

<div class="col-lg-12 pt-2">    
    <div class="row">
        <RadzenSplitter>
            <RadzenSplitterPane Size="25%" Min="200px" Max="45%">            
                <KntFoldersTreeView  FoldersInfo="foldersTree" FolderSelected="FolderSelected"  /> @* ShowRefreshTree="false"  RefreshTreeFolders="OnRefreshTreeFolders"*@
            </RadzenSplitterPane>
            <RadzenSplitterPane>                            
                <RadzenPager @ref="pager" ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" 
                            HorizontalAlign="HorizontalAlign.Right" 
                            Count="@((int)paginationContext.TotalCount)" 
                            PageSize="@paginationContext.PageSize" PageNumbersCount="5" 
                            PageChanged=@PageChanged/>

                @if (folder == null)
                {
                    <h5>  </h5>
                }
                else
                {                    
                    @if (viewMode == 0)
                    {
                        <NotesIndex Notes="notes" OnNoteDelete="OnDelete" OnNoteEdit="OnEdit" OnNoteView="OnView"></NotesIndex>
                    }
                    else
                    {
                        <NotesList Notes="notes" OnNoteDelete="OnDelete" OnNoteEdit="OnEdit" OnNoteView="OnView" />
                    }
                }           
            </RadzenSplitterPane>
        </RadzenSplitter>
    </div>
</div>


@code {    
    private List<FolderDto> foldersTree;        
    private List<NoteInfoDto> notes;
    private FolderDto folder;
    private NotesFilterDto filter = new NotesFilterDto();
    private PaginationContext paginationContext = new PaginationContext();
    private RadzenPager pager;
    private string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";    
    private int viewMode = 0;    
    private bool componentInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        appState.OnChange += StateHasChanged;
        await Load();
        componentInitialized = true;
    }

    private async Task Load()
    {
        if (appState.FoldersTree == null)
        {
            var result = await webApiService.Folders.GetTreeAsync();
            foldersTree = result.Entity;
            appState.FoldersTree = foldersTree;

            if (foldersTree?.Count > 0)
            {
                var f = foldersTree.Select(x => x).FirstOrDefault();
                f.Selected = true;
                await FolderSelected(f);
            }
        }
        else
        {
            foldersTree = appState.FoldersTree;
            await FolderSelected(appState.SelectedFolder.GetSimpleDto<FolderDto>());
        }
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private async Task FolderSelected(FolderDto f)
    {
        folder = f;
        appState.SelectedFolder = folder.GetSimpleDto<FolderDto>();

        paginationContext.CurrentPage = 1;
        if(componentInitialized)
            await pager.GoToPage(0);

        await SelectedPage(1);
    }

    private void ToggleView()
    {
        viewMode = (viewMode == 0) ? 1 : 0;
    }

    private async Task PageChanged(PagerEventArgs args)
    {
        await SelectedPage(args.PageIndex + 1);                
    }

    private async Task SelectedPage(int page)
    {
        paginationContext.CurrentPage = page;
        await LoadNotesWithPagination();
    }

    private async Task LoadNotesWithPagination()
    {
        notes = null;

        filter.FolderId = folder.FolderId;
        filter.PageIdentifier = paginationContext.PageIdentifier;

        var result = await webApiService.Notes.GetFilter(filter);

        if (!result.IsValid)
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Load notes ...", Detail =  result.Message, Duration = 12000 });
        }
        else
        {
            notes = result.Entity;
            paginationContext.TotalCount = result.TotalCount;
        }

        StateHasChanged();
    }

    void OnNew()
    {
        navigationManager.NavigateTo($"notes/new/tree");
    }

    void OnView(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/{note.NoteId}/tree");
    }

    void OnEdit(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/edit/{note.NoteId}/tree");
    }

    async Task OnDelete(NoteInfoDto item)
    {                
        var resultDialog = await dialogService.Confirm(
            $"Are you sure you want delete note - {@item.Topic} - ({@item.NoteNumber})?", 
            "Delete note", 
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (resultDialog == true)
        {
            var result = await webApiService.Notes.DeleteAsync(item.NoteId);
            if (!result.IsValid)            
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Delete note.", Detail =  result.Message, Duration = 12000 });            
            else
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Delete note.", Detail =  "The note has been deleted.", Duration = 3000 });
                await LoadNotesWithPagination();
            }            
        }
    }

    private async Task RefreshTreeFolders()
    {
        foldersTree = null;
        notes = null;
        appState.FoldersTree = null;
        await Load();
    }
    
}

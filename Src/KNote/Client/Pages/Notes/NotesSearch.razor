@page "/notes/search"
@page "/search"

@inject IWebApiService webApiService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages
@inject HttpClient Http

@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]

<div class="container-fluid">
    <div class="row">
        <div class="col-6">
            <h3 class="pt-3">Notes search</h3>
        </div>
        <div class="col-6">
            <span class="float-right">
                <RadzenMenu>
                    <RadzenMenuItem Text="New note" Icon="post_add"  Click="GoNoteNew"></RadzenMenuItem>
                    <RadzenMenuItem Text="Display options" Icon="tune">
                        @if (viewMode == 0)
                        {                                 
                            <RadzenMenuItem Text="Item view" Click="ToggleView"></RadzenMenuItem>                                        
                        }
                        else
                        {                                    
                            <RadzenMenuItem Text="Table view" Click="ToggleView"></RadzenMenuItem>                        
                        }            
                    </RadzenMenuItem>
                </RadzenMenu>
            </span>
        </div>
    </div>
</div>

<!--- Move this to new component -->
<hr class="mt-0" />
<div class="form-group row">
    <div class="input-group col-sm-11 mb-2" id="atrText">
        <input type="text" class="form-control" @bind-value="textSearch" @bind-value:event="oninput"
               @onkeypress="@((KeyboardEventArgs e) => TopicKeyPress(e))"
               placeholder="Text search  ..." />
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick="@CleanOnClick"
                    data-toggle="tooltip" title="Clean search">
                X
            </button>
        </div>
    </div>

    <div class="col-1 float-left">
        <button type="button" class="btn btn-primary mb-2 mx-sm-3" @onclick="OnLoadListNotes"
                data-toggle="tooltip" title="Apply search">
            <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
        </button>
    </div>
</div>
<hr />
<!---->

<div class="row">
    <div class="col-12 pt-2">
        <RadzenPager @ref="pager" ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" 
                        HorizontalAlign="HorizontalAlign.Right" 
                        Count="@((int)paginationContext.TotalCount)" 
                        PageSize="@paginationContext.PageSize" PageNumbersCount="5" 
                        PageChanged=@PageChanged />
    </div>
</div>
<div class="row">
    <div class="col-12">
        @if (viewMode == 0)
        {
            <NotesIndex Notes="notes" OnNoteDelete="GoNoteDelete" OnNoteEdit="GoNoteEdit" OnNoteView="GoNoteView"></NotesIndex>
        }
        else
        {
            <NotesList Notes="notes" OnNoteDelete="GoNoteDelete" OnNoteEdit="GoNoteEdit" OnNoteView="GoNoteView" />
        }
    </div>
</div>

<ModalDialog @ref="modalDialog" Title="Delete note" onConfirm="ConfirmDelete" onCancel="CancelDelete">
    <div><p>Are you sure you want to delete note "@itemDelete.Topic (@itemDelete.NoteNumber)" ?</p></div>
</ModalDialog>


@code {

    private List<NoteInfoDto> notes;
    private ModalDialog modalDialog;
    private NoteInfoDto itemDelete;
    private int viewMode = 0;
    private string textSearch = "";
    private Dictionary<string, string> queryStringsDict = new Dictionary<string, string>();

    PaginationContext paginationContext = new PaginationContext();
    private string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    private RadzenPager pager;
    private bool componentInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        var url = navigationManager.Uri;
        var queries = navigationManager.GetQueryStrings(url);

        if (queries == null)
        {
            await GetFilteredNotes(string.Empty);
        }
        else
        {
            queryStringsDict = queries;
            LoadFormControls();
            var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];
            await GetFilteredNotes(queryStrings);
        }
        componentInitialized = true;
    }

    #region Utils

    private void ToggleView()
    {
        viewMode = (viewMode == 0) ? 1 : 0;
    }

    private void LoadFormControls()
    {
        if (queryStringsDict.ContainsKey("textSearch"))
        {
            textSearch = queryStringsDict["textSearch"];
        }

        if (queryStringsDict.ContainsKey("paginationContext.PageIdentifier.PageNumber"))
        {
            int currentPage;
            int.TryParse(queryStringsDict["pageNumber"], out currentPage);
            paginationContext.CurrentPage = currentPage;
        }
    }

    private string BuildQueryStrings()
    {
        if (queryStringsDict == null) { queryStringsDict = new Dictionary<string, string>(); }
        queryStringsDict["textSearch"] = textSearch?.ToString();
        queryStringsDict["pageNumber"] = paginationContext.CurrentPage.ToString();
        queryStringsDict["pageSize"] = paginationContext.PageSize.ToString();


        var defaultValues = new List<string>() { "false", "", "0" };

        var strReturn = string.Join("&", queryStringsDict
            .Where(x => !defaultValues.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

        return strReturn;
    }

    #endregion

    #region Navigation events

    private async Task OnLoadListNotes()
    {
        paginationContext.CurrentPage = 1;
        if(componentInitialized)
            await pager.GoToPage(0);        
        await LoadListNotes();
    }

    private async Task TopicKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadListNotes();
        }
    }

    private async Task CleanOnClick()
    {
        textSearch = "";
        paginationContext.CurrentPage = 1;
        await LoadListNotes();
    }

    private async Task PageChanged(PagerEventArgs args)
    {
        await OnSelectedPage(args.PageIndex + 1);                
    }

    private async Task OnSelectedPage(int page)
    {
        paginationContext.CurrentPage = page;
        await LoadListNotes();
    }

    #endregion

    #region Load data ....

    private async Task LoadListNotes()
    {
        var queryStrings = BuildQueryStrings();
        navigationManager.NavigateTo("notes/search?" + queryStrings);
        await GetFilteredNotes(queryStrings);
    }

    private async Task GetFilteredNotes(string queryString)
    {
        notes = null;

        if (string.IsNullOrEmpty(queryString))
            queryString = $"pageNumber={paginationContext.CurrentPage}&pageSize={paginationContext.PageSize}";

        var result = await webApiService.Notes.GetSearch(queryString);

        if (!result.IsValid)
        {
            await showMessages.ShowErrorMessage(result.Message);
        }
        else
        {
            notes = result.Entity;
            paginationContext.TotalCount = result.TotalCount;
        }
    }

    #endregion

    #region  Edit / Delete events ...

    private void GoNoteView(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/{note.NoteId}/search");
    }

    void GoNoteNew()
    {
        navigationManager.NavigateTo($"notes/new/search");
    }

    private void GoNoteEdit(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/edit/{note.NoteId}/search");
    }

    private void GoNoteDelete(NoteInfoDto item)
    {
        modalDialog.Show();
        itemDelete = item;
    }

    private void CancelDelete()
    {
        modalDialog.Hide();
        itemDelete = null;
    }

    private async Task ConfirmDelete()
    {
        modalDialog.Hide();

        var result = await webApiService.Notes.DeleteAsync(itemDelete.NoteId);
        if (!result.IsValid)
            await showMessages.ShowErrorMessage(result.Message);
        else
            await LoadListNotes();

        itemDelete = null;
    }

    #endregion

}

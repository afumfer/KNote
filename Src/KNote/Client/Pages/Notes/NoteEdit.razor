@page "/notes/edit/{NoteId}/{PageReturn}"

@implements IDisposable

@inject IStore store
@inject NotificationService notificationService

@attribute [Authorize(Roles = "Staff, ProjecManager, Admin")]

@if (showForm)
{
    <NoteForm Title="Note edit" Note="note" OnValidSubmit="OnSave" OnValidSubmitWithNew="OnSaveAndNew" OnExit="OnExit" NoteTypes="noteTypes"></NoteForm>
}
else
{
    <text>Loading ... </text>
}

@code {

    [Parameter] public string NoteId { get; set; }
    [Parameter] public string PageReturn { get; set; }

    private NoteDto note;
    private bool showForm = false;
    private List<NoteTypeDto> noteTypes;
    private AppState appState;

    #region Initialize and Dispose

    protected async override Task OnInitializedAsync()
    {
        appState = store.AppState;
        appState.OnChange += StateHasChanged;

        var result = await store.NoteTypes.GetAllAsync();
        if (!result.IsValid)
        {            
            store.NavigateTo("index");
        }
        else
        {
            noteTypes = result.Entity;

            await GetNote();

            showForm = true;
        }

        if (PageReturn == null)
            PageReturn = "index";
        else if (PageReturn == "tree")
            PageReturn = "notes/tree";

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    #endregion

    #region Data methods

    private async Task GetNote()
    {
        var result = await store.Notes.GetAsync(Guid.Parse(NoteId));
        if (!result.IsValid)
        {                        
            store.NavigateTo("index");
        }
        else
        {
            note = result.Entity;
            showForm = true;
        }
    }

    private async Task SaveNote()
    {
        var result = await store.Notes.SaveAsync(note);

        if(result.IsValid)
            note = result.Entity;

    }

    private async Task GetNewNote()
    {
        var result = await store.Notes.NewAsync();
        
        if (result.IsValid)
        {
            note = result.Entity;
            if (appState.SelectedFolder != null)
            {
                note.FolderDto = appState.SelectedFolder.GetSimpleDto<FolderDto>();
                note.FolderId = appState.SelectedFolder.FolderId;
            }
            showForm = true;
        }
    }

    #endregion

    #region Events managment

    private async Task OnSave()
    {
        await SaveNote();
    }

    private async Task OnSaveAndNew()
    {
        await SaveNote();
        await GetNewNote();
    }

    private void OnExit()
    {        
        store.NavigateTo(PageReturn);
    }

    #endregion

}

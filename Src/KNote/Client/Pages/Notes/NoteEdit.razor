@page "/notes/edit/{NoteId}/{PageReturn}"

@inject AppState appState
@inject IGenericDataService  dataService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages

@attribute [Authorize(Roles = "Staff, ProjecManager, Admin")]

@if (showForm)
{
    <NoteForm Title="Note edit" Note="note" OnValidSubmit="OnSave" OnValidSubmitWithNew="OnSaveAndNew" OnExit="OnExit" NoteTypes="noteTypes"></NoteForm>
}
else
{
    <text>Loading ... </text>
}

@code {

    // TODO:
    // Pendiente de refactorizar, el comportamiento de este caso de uso
    // se puede generalizar y unificarlo con el caso de uso Nueva Nota.
    
    [Parameter] public string NoteId { get; set; }
    [Parameter] public string PageReturn { get; set; }

    private NoteDto note;
    private bool showForm = false;
    private List<NoteTypeDto> noteTypes;

    #region Initialize and Dispose

    protected async override Task OnInitializedAsync()
    {
        appState.OnChange += StateHasChanged;

        var httpResponse2 = await dataService.Get<Result<List<NoteTypeDto>>>("api/notetypes");
        if (httpResponse2.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse2.GetBody());
            navigationManager.NavigateTo("/");
        }
        else
        {
            noteTypes = httpResponse2.Response.Entity;

            await GetNote();

            showForm = true;
        }

        if (PageReturn == null)
            PageReturn = "index";
        else if (PageReturn == "tree")
            PageReturn = "notes/tree";

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    #endregion

    #region Data methods

    private async Task GetNote()
    {
        var httpResponse = await dataService.Get<Result<NoteDto>>($"api/notes/{NoteId}");
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
            navigationManager.NavigateTo("/");
        }
        else
        {
            note = httpResponse.Response.Entity;
            showForm = true;
        }
    }

    private async Task SaveNote()
    {
        var httpResponse = await dataService.Post<NoteDto, Result<NoteDto>>("api/notes", note);
        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            note = httpResponse.Response.Entity;

            await showMessages.ShowOkMessage("Note successfully updated.");
        }
    }

    private async Task GetNewNote()
    {
        var httpResponseNote = await dataService.Get<Result<NoteDto>>("api/notes/new");
        if (httpResponseNote.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponseNote.GetBody());
        }
        else
        {
            note = httpResponseNote.Response.Entity;
            if (appState.SelectedFolder != null)
            {
                note.FolderDto = appState.SelectedFolder.GetSimpleDto<FolderDto>();
                note.FolderId = appState.SelectedFolder.FolderId;
            }
            showForm = true;
        }
    }

    #endregion

    #region Events managment

    private async Task OnSave()
    {
        await SaveNote();
    }


    private async Task OnSaveAndNew()
    {
        await SaveNote();
        await GetNewNote();
    }

    private void OnExit()
    {
        navigationManager.NavigateTo(PageReturn);
    }

    #endregion

}

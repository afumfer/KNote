@page "/notes/filter"
@page "/filter"

@inject IStore store
@inject TooltipService tooltipService
@inject DialogService dialogService

@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]


<div class="container-fluid border">
    <div class="row">
        <KntIndexHeader TextHead="Notes filter">
            <IndexMenu>
                <RadzenMenu>
                    <RadzenMenuItem Text="New note" Icon="post_add"  Click="OnNew"></RadzenMenuItem>
                    <RadzenMenuItem Text="Display options" Icon="tune">
                        @if (viewMode == 0)
                        {                                 
                            <RadzenMenuItem Text="Item view" Click="ToggleView"></RadzenMenuItem>                                        
                        }
                        else
                        {                                    
                            <RadzenMenuItem Text="Table view" Click="ToggleView"></RadzenMenuItem>                        
                        }            
                    </RadzenMenuItem>
                </RadzenMenu>
            </IndexMenu>
        </KntIndexHeader>
    </div>
</div>

<RadzenCard class="docu pt-1 pl-0 pr-1 pb-0 mt-2">
    <div class="row">
        <div class="col-12">
            <RadzenSplitter> 
                 <RadzenSplitterPane Size="30%" Min="200px" Max="50%">   
                     <div class="p-2 border">
                        <NotesFilterCriteria FilterSelected="FilterSelected" />
                    </div>
                 </RadzenSplitterPane>
                 <RadzenSplitterPane> 
                    <RadzenPager Density="Density.Compact" @ref="pager" ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat"
                                 HorizontalAlign="HorizontalAlign.Right" 
                            Count="@((int)paginationContext.TotalCount)" 
                            PageSize="@paginationContext.PageSize" PageNumbersCount="5" 
                            PageChanged=@PageChanged/>
                    @if (viewMode == 0)
                    {
                        <NotesIndex Notes="notes" OnNoteDelete="OnDelete" OnNoteEdit="OnEdit"  OnNoteView="OnView"></NotesIndex>
                    }
                    else
                    {
                        <NotesList Notes="notes" OnNoteDelete="OnDelete" OnNoteEdit="OnEdit" OnNoteView="OnView" />
                    } 
                 </RadzenSplitterPane>
            </RadzenSplitter>
        </div>
    </div>
</RadzenCard>

@code {        
    private List<NoteInfoDto>? notes = new List<NoteInfoDto>();
    private NotesFilterDto filter = new NotesFilterDto();
    private PaginationContext paginationContext = new PaginationContext();
    private RadzenPager? pager;
    private string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";    
    private int viewMode = 0;
    private bool componentInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        await SelectedPage(1);
        await base.OnInitializedAsync();
        componentInitialized = true;
    }

    private void ToggleView()
    {
        viewMode = (viewMode == 0) ? 1 : 0;
    }

    private async Task FilterSelected(NotesFilterDto f)
    {
        filter = f;
        await SelectedPage(1);
        if(componentInitialized)
            if (pager != null)
                await pager.GoToPage(0);
    }

    private async Task PageChanged(PagerEventArgs args)
    {
        await SelectedPage(args.PageIndex + 1);                
    }

    private async Task SelectedPage(int page)
    {
        paginationContext.CurrentPage = page;
        await LoadNotesWithPagination();
    }

    private async Task LoadNotesWithPagination()
    {
        notes = null;

        filter.PageIdentifier = paginationContext.PageIdentifier;
        var result = await store.Notes.GetFilter(filter);
        if (result.IsValid)
        {
            paginationContext.TotalCount = result.TotalCount;
            notes = result.Entity;
        }
    }

    void OnNew()
    {
        store.NavigateTo($"notes/new/filter");
    }

    void OnView(NoteInfoDto note)
    {
        store.NavigateTo($"notes/{note.NoteId}/filter");
    }

    void OnEdit(NoteInfoDto note)
    {
        store.NavigateTo($"notes/edit/{note.NoteId}/filter");
    }

    async Task OnDelete(NoteInfoDto item)
    {                
        var resultDialog = await dialogService.Confirm(
            $"Are you sure you want delete note - {@item.Topic} - ({@item.NoteNumber})?", 
            "Delete note", 
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (resultDialog == true)
        {
            var result = await store.Notes.DeleteAsync(item.NoteId);
            if (result.IsValid)
            {
                await LoadNotesWithPagination();
            }
        }
    }

}

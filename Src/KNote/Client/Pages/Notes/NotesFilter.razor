@page "/notes/filter"
@page "/filter"

@inject IWebApiService webApiService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages

@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]

<div class="container-fluid">
    <div class="row">
        <div class="col-6">
            <h3 class="pt-3">Notes filter</h3>
        </div>
        <div class="col-6 float-right">
            <span class="float-right">
                <RadzenMenu>
                    <RadzenMenuItem Text="New note" Icon="post_add"  Click="GoNoteNew"></RadzenMenuItem>
                    <RadzenMenuItem Text="Display options" Icon="tune">
                        @if (viewMode == 0)
                        {                                 
                            <RadzenMenuItem Text="Item view" Click="ToggleView"></RadzenMenuItem>                                        
                        }
                        else
                        {                                    
                            <RadzenMenuItem Text="Table view" Click="ToggleView"></RadzenMenuItem>                        
                        }            
                    </RadzenMenuItem>
                </RadzenMenu>
            </span>
        </div>
    </div>
</div>
<hr class="mt-0" />

<div class="row">
    <RadzenSplitter> 
         <RadzenSplitterPane Size="30%" Min="200px" Max="50%">   
             <div class="p-2 bg-light border">
                <NotesFilterCriteria FilterSelected="FilterSelected" />
            </div>
         </RadzenSplitterPane>
         <RadzenSplitterPane> 
            <RadzenPager @ref="pager" ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" 
                    HorizontalAlign="HorizontalAlign.Right" 
                    Count="@((int)paginationContext.TotalCount)" 
                    PageSize="@paginationContext.PageSize" PageNumbersCount="5" 
                    PageChanged=@PageChanged/>
            @if (viewMode == 0)
            {
                <NotesIndex Notes="notes" OnNoteDelete="GoNoteDelete" OnNoteEdit="GoNoteEdit"  OnNoteView="GoNoteView"></NotesIndex>
            }
            else
            {
                <NotesList Notes="notes" OnNoteDelete="GoNoteDelete" OnNoteEdit="GoNoteEdit" OnNoteView="GoNoteView" />
            } 
         </RadzenSplitterPane>
    </RadzenSplitter>
</div>

<ModalDialog @ref="modalDialog" Title="Delete note" onConfirm="ConfirmDelete" onCancel="CancelDelete">
    <div><p>Are you sure you want to delete note "@itemDelete.Topic (@itemDelete.NoteNumber)" ?</p></div>
</ModalDialog>

@code {
    private ModalDialog modalDialog;
    private NoteInfoDto itemDelete;    
    private List<NoteInfoDto> notes = new List<NoteInfoDto>();
    private NotesFilterDto filter = new NotesFilterDto();
    private PaginationContext paginationContext = new PaginationContext();
    private RadzenPager pager;
    private string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";    
    private int viewMode = 0;
    private bool componentInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        await SelectedPage(1);
        await base.OnInitializedAsync();
        componentInitialized = true;
    }

    private void ToggleView()
    {
        viewMode = (viewMode == 0) ? 1 : 0;
    }

    private async Task FilterSelected(NotesFilterDto f)
    {
        filter = f;
        await SelectedPage(1);
        if(componentInitialized)
            await pager.GoToPage(0);
    }

    private async Task PageChanged(PagerEventArgs args)
    {
        await SelectedPage(args.PageIndex + 1);                
    }

    private async Task SelectedPage(int page)
    {
        paginationContext.CurrentPage = page;
        await LoadNotesWithPagination();
    }

    private async Task LoadNotesWithPagination()
    {
        notes = null;

        filter.PageIdentifier = paginationContext.PageIdentifier;
        var result = await webApiService.Notes.GetFilter(filter);

        if (!result.IsValid)
        {
            await showMessages.ShowErrorMessage(result.Message);
        }
        else
        {
            paginationContext.TotalCount = result.TotalCount;
            notes = result.Entity;
        }
    }

    private async Task ConfirmDelete()
    {
        modalDialog.Hide();

        var result = await webApiService.Notes.DeleteAsync(itemDelete.NoteId);
        if (!result.IsValid)        
            await showMessages.ShowErrorMessage(result.Message);        
        else        
            await LoadNotesWithPagination();
        
        itemDelete = null;
    }

    private void CancelDelete()
    {
        modalDialog.Hide();
        itemDelete = null;
    }

    private void GoNoteDelete(NoteInfoDto item)
    {
        modalDialog.Show();
        itemDelete = item;
    }

    void GoNoteNew()
    {
        navigationManager.NavigateTo($"notes/new/filter");
    }

    void GoNoteView(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/{note.NoteId}/filter");
    }

    void GoNoteEdit(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/edit/{note.NoteId}/filter");
    }

}

@inject IStore webApiService
@inject NotificationService notificationService
@inject DialogService dialogService
@inject TooltipService tooltipService

<EditForm Model="Note" Context="formContext">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    
    <ToolingHeader Title="@Title">
        <Buttons>            
            <RadzenButton Text="Save changes" Icon="save" Click="() => Save(formContext, false)" ButtonStyle="ButtonStyle.Primary" Class="mr-1" /> 
            <RadzenButton Text="Save changes and new" Icon="save" Click="() => Save(formContext, true)" ButtonStyle="ButtonStyle.Primary" Class="mr-1" /> 
            <RadzenButton Icon="logout" Click="() => OnExit.InvokeAsync(null)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"  />  
        </Buttons>
    </ToolingHeader>

    <RadzenTabs Change=@ShowPanel TabPosition = "TabPosition.Top" @bind-SelectedIndex="tabsSelectedIndex">
        <Tabs>
            <RadzenTabsItem Text="&nbsp;Overview" Icon="article" >                

                <div class="form-group row">
                    <label for="atrTopic" class="col-sm-1 col-form-label">Topic:</label>
                    <div class="input-group col-sm-11 d-flex flex-column" id="atrTopic">
                        <div class="d-flex">
                            <InputText class="form-control" @bind-Value="@Note.Topic" />
                            <div class="input-group-append">
                                <label class="btn btn-outline-secondary" data-toggle="tooltip" title="Note number (automatically assigned)">
                                    #@Note.NoteNumber
                                </label>
                            </div>
                        </div>
                        <ValidationMessage For="@(() => Note.Topic)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label for="atrFolder" class="col-sm-1 col-form-label">Folder:</label>
                    <div class="input-group col-sm-11 d-flex flex-column" id="atrFolder">
                        <div class="d-flex">
                            <input type="text" disabled class="form-control" @bind="@Note.FolderDto.Name" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" @onclick="@OnFolderSelector"
                                        data-toggle="tooltip" title="Select folder">
                                    <i class="fa fa-folder" aria-hidden="true"></i>
                                </button>
                            </div>
                        </div>
                        <ValidationMessage For="@(() => Note.FolderId)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label for="atrPriority" class="col-sm-1 col-form-label">Priority:</label>
                    <div class="input-group col-sm-2" id="atrPriority">
                        <InputNumber class="form-control col-sm-11" @bind-Value="@Note.Priority" />
                        <ValidationMessage For="@(() => Note.Priority)" />
                    </div>

                    <label for="atrTags" class="col-sm-1 col-form-label">Tags:</label>
                    <div class="input-group col-sm-4" id="atrTags">
                        <InputText class="form-control" @bind-Value="@Note.Tags" />
                        <ValidationMessage For="@(() => Note.Tags)" />
                    </div>

                    <label for="atrNoteType" class="col-sm-1 col-form-label">Type:</label>
                    <div class="input-group col-sm-3" id="atrNoteType">
                        <InputSelect class="form-control col-sm11"
                                        Value="@Note.NoteTypeId"
                                        ValueChanged="@((Guid? noteTypeId) => OnChangeNoteTypeActions(noteTypeId))"
                                        ValueExpression="@(() => Note.NoteTypeId)">
                            <option></option>
                            @if (NoteTypes != null)
                            {
                                @foreach (var ntype in NoteTypes)
                                {
                                    <option value=@ntype.NoteTypeId>@ntype.Name</option>
                                }
                            }
                        </InputSelect>                
                        <ValidationMessage For="@(() => Note.NoteTypeId)" />
                    </div>
                </div>
                               
                <div class="form-group form-markdown">
                    <InputMarkdown @bind-Value="@Note.Description"
                                   For="@(() => Note.Description)"></InputMarkdown>
                </div>
            
            </RadzenTabsItem>
            
            <RadzenTabsItem Text="&nbsp;Attributes" Icon="fact_check">                
                <NoteKAttributes @ref="noteKAttributes"  Attributes="Note.KAttributesDto"></NoteKAttributes>
            </RadzenTabsItem>
            
            <RadzenTabsItem Text="&nbsp;Resources" Icon="upload_file">                
                @if (resources == null)
                {
                    <p>Loading resources ...</p>
                }
                else
                {
                    <NoteKResources Resources="resources"
                                    OnDelete="OnDeleteResource"
                                    OnInsertInDesription="InsertInDescription"
                                    OnNew="OnNewResource">
                    </NoteKResources>
                }
            </RadzenTabsItem>
            
            <RadzenTabsItem Text="&nbsp;Tasks" Icon="task">                
                @if (tasks == null)
                {
                    <p>Loading tasks ...</p>
                }
                else
                {
                    <NoteKTasks Tasks="tasks"
                                OnDelete="OnDeleteTask"
                                OnNew="OnNewTask"
                                OnEdit="OnEditTask">
                    </NoteKTasks>
                }
            </RadzenTabsItem>

        </Tabs>
    </RadzenTabs>

</EditForm>

@code {
    [Parameter] [EditorRequired] public NoteDto Note { get; set; } = null!;
    [Parameter] public List<NoteTypeDto>? NoteTypes { get; set; } 
    [Parameter] public string Title { get; set; } = "...";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnValidSubmitWithNew { get; set; }
    [Parameter] public EventCallback OnExit { get; set; }

    private List<ResourceInfoDto>? resources;
    private List<NoteTaskDto>? tasks; 
    private NoteTaskDto? taskEdit; 
    private List<UserDto>? users;
    private NoteKAttributes noteKAttributes = null!;

    private Guid? oldNoteType = null;

    private int tabsSelectedIndex { get; set; } = 0;

    #region Initialized

    protected override async Task OnInitializedAsync()
    {
        var result = await webApiService.Users.GetAllAsync();
        if (result.IsValid)
        {
            users = result.Entity;
        }

        oldNoteType = Note.NoteTypeId;

        await base.OnInitializedAsync();
    }

    #endregion

    #region Data managment

    protected async Task Save(EditContext formContext, bool saveAndNew)
    {
        string addMessage = "";

        bool formIsValid = formContext.Validate();

        foreach (var KAttribute in Note.KAttributesDto)
        {
            switch (KAttribute.KAttributeDataType)
            {
                case EnumKAttributeDataType.String:
                    KAttribute.Value = KAttribute.ValueString;
                    break;
                case EnumKAttributeDataType.TextArea:
                    KAttribute.Value = KAttribute.ValueString;
                    break;
                case EnumKAttributeDataType.Int:                    
                    KAttribute.Value = KAttribute.ValueInt.ToString();
                    break;
                case EnumKAttributeDataType.Double:                    
                    KAttribute.Value = KAttribute.ValueDouble.ToString();
                    break;
                case EnumKAttributeDataType.DateTime:                    
                    KAttribute.Value = KAttribute.ValueDateTime.ToString();
                    break;
                case EnumKAttributeDataType.Bool:
                    KAttribute.Value = KAttribute.ValueBool.ToString();
                    break;
                case EnumKAttributeDataType.TabulatedValue:
                    KAttribute.Value = KAttribute.ValueTabulate;
                    break;
                case EnumKAttributeDataType.TagsValue:
                    KAttribute.Value = KAttribute.ValueTags;
                    break;
                default:
                    break;
            }

            if (KAttribute.RequiredValue == true && string.IsNullOrEmpty(KAttribute.Value))
            {
                formIsValid = false;
                addMessage += $" {KAttribute.Name} is required.";
            }
        }

        if (formIsValid == false)
        {            
            var msgErr = "Incorrect data, check the required attributes. " + addMessage;
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save note.", Detail =  msgErr, Duration = 12000 });
            return;
        }

        var xx = Note.KAttributesDto;

        if (saveAndNew)
            await OnValidSubmitWithNew.InvokeAsync(formContext);
        else
            await OnValidSubmit.InvokeAsync(formContext);
    }

    #endregion

    #region Panel managment

    private async Task ShowPanel(int panel)
    {        
        if (panel == 2 && resources == null)
        {
            var result = await webApiService.Notes.GetResourcesAsync(Note.NoteId);
            if (result.IsValid)
                resources = result.Entity;
        }

        if (panel == 3 && tasks == null)
        {
            var result = await webApiService.Notes.GetNoteTasksAsync(Note.NoteId);
            if (result.IsValid)
                tasks = result.Entity;
        }

        StateHasChanged();
    }

    #endregion

    #region Managment FolderSelector

    private async Task OnFolderSelector()
    {        
        var res = await dialogService.OpenAsync<KntFolderSelector>($"Folder selector",
               new Dictionary<string, object>() {  },
               new DialogOptions() { Width = "700px", Height = "520px"});        

        if(res != null)
        {
            var f = (FolderDto)res;
            Note.FolderDto = f.GetSimpleDto<FolderDto>();
            Note.FolderId = f.FolderId;
        }
    }

    #endregion

    #region Managment ResourceSelector

    private async Task OnNewResource()
    {
        if (Note.IsNew())
        {            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "New resource for this note.", Detail =  "You must save the note before assigning resources to it.", Duration = 12000 });
        }
        else
        {            
            var resultDialog = await dialogService.OpenAsync<NoteResourceSelector>($"New resource",
                   new Dictionary<string, object>() { },
                   new DialogOptions() { Width = "800px", Height = "600px", Resizable = true, Draggable = true });

            if(resultDialog != null)
            {
                resultDialog.NoteId = Note.NoteId;
                resultDialog.Name = Note.NoteId.ToString() + "_" + resultDialog.Name;

                var resultApi = await webApiService.Notes.SaveResourceAsync(resultDialog);
                if (resultApi.IsValid)
                {
                    // TODO: This not refresh UI, ?? 
                    //resources.Add(resultApi.Entity);

                    // Alternative implementation
                    resources = null;
                    await ShowPanel(2);
                }
            }
        }
    }

    private async Task OnDeleteResource(ResourceInfoDto resource)
    {
        var result = await webApiService.Notes.DeleteResourceAsync(resource.ResourceId);
        if (result.IsValid)
        {
            // TODO: This not refresh UI, ??
            //resources.Add(resultApi.Entity);

            resources = null;
            await ShowPanel(2);
        }
    }

    private void InsertInDescription(ResourceInfoDto resource)
    {
        if (resource.FileType == "image/jpeg")
            Note.Description += "\n\n![alt text](" + resource?.RelativeUrl + " '" + resource?.Description + "' )";
        else
            Note.Description += "\n\n<a href=" + resource?.RelativeUrl + " target='_blank'>" + resource?.Description + "</a>";

        tabsSelectedIndex = 0;
        StateHasChanged();        
    }

    #endregion

    #region Tasks managment

    private async Task OnNewTask()
    {
        if (Note.IsNew())
        {            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "New task for this note.", Detail =  "You must save the note before assigning tasks to it.", Duration = 12000 });
        }
        else
        {
            taskEdit = null;            

            var result = await dialogService.OpenAsync<NoteTaskEditor>($"New task",
                   new Dictionary<string, object?>() { { "TaskEdit", null }, { "Users" , users} },
                   new DialogOptions() { Width = "800px", Height = "600px", Resizable = true, Draggable = true });

            if(result != null)
                await SaveEditedTask(result); 
        }
    }

    private async Task OnEditTask(NoteTaskDto task)
    {
        taskEdit = task;        

        var result = await dialogService.OpenAsync<NoteTaskEditor>($"Edit task",
               new Dictionary<string, object?>() { { "TaskEdit", task }, { "Users" , users} },
               new DialogOptions() { Width = "800px", Height = "600px", Resizable = true, Draggable = true });

        if(result != null)
        {
            await SaveEditedTask(result); 
        }
    }

    private async Task SaveEditedTask(NoteTaskDto task)
    {
        task.NoteId = Note.NoteId;

        var result = await webApiService.Notes.SaveNoteTaskAsync(task);
        if (result.IsValid)
        {
            tasks = null;
            await ShowPanel(3);
        }
    }

    private async Task OnDeleteTask(NoteTaskDto task)
    {
        var result = await webApiService.Notes.DeleteNoteTaskAsync(task.NoteTaskId);
        if (result.IsValid)
        {
            tasks = null;
            await ShowPanel(3);
        }
    }

    #endregion

    #region NoteType change control

    private async Task OnChangeNoteTypeActions(Guid? noteType)
    {
        Note.NoteTypeId = noteType;

        if (Note.NoteTypeId == null)
        {
            Note.KAttributesDto.RemoveAll(_ => _.KAttributeNoteTypeId != null);

            oldNoteType = null;
            Note.NoteTypeDto = null;
            return;
        }

        if (Note.NoteTypeId == oldNoteType)
            return;

        var result = await webApiService.KAttributes.GetAllAsync(Note.NoteTypeId);
        if (result.IsValid)
        {
            var listA = result.Entity;

            Note.KAttributesDto.RemoveAll(_ => _.KAttributeNoteTypeId != null);

            foreach (var a in listA)
            {
                var newA = a.GetSimpleDto<NoteKAttributeDto>();
                newA.NoteId = Note.NoteId;
                newA.KAttributeNoteTypeId = Note.NoteTypeId;
                Note.KAttributesDto.Add(newA);
            }

            foreach (var a in Note.KAttributesDto)
            {
                if (a.KAttributeDataType == EnumKAttributeDataType.TabulatedValue)
                    a.TabulatedValues = await noteKAttributes.GetTabulatedValues(a.KAttributeId);
                if (a.KAttributeDataType == EnumKAttributeDataType.TagsValue)
                    a.TagsValues = await noteKAttributes.GetTagsValues(a.KAttributeId, "");
            }

            if (NoteTypes != null)
            {
                Note.NoteTypeDto = NoteTypes.Where(_ => _.NoteTypeId == Note.NoteTypeId).FirstOrDefault();
                oldNoteType = Note.NoteTypeId;                
            }
        }
    }

    #endregion

}


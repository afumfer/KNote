@inject IWebApiService webApiService
@inject NavigationManager navigationManager
@inject DialogService dialogService
@inject NotificationService notificationService

<EditForm Model="Note" Context="formContext">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    
    <ToolingHeader Title="@Title">
        <Buttons>            
            <RadzenButton Text="Save changes" Icon="save" Click="() => Save(formContext, false)" ButtonStyle="ButtonStyle.Primary" Class="mr-1" /> 
            <RadzenButton Text="Save changes and new" Icon="save" Click="() => Save(formContext, true)" ButtonStyle="ButtonStyle.Primary" Class="mr-1" /> 
            <RadzenButton Icon="logout" Click="() => OnExit.InvokeAsync(null)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"  />  
        </Buttons>
    </ToolingHeader>

    <RadzenTabs Change=@ShowPanel TabPosition = "TabPosition.Left" @bind-SelectedIndex="tabsSelectedIndex">
        <Tabs>
            <RadzenTabsItem Text="&nbsp;Overview" Icon="article" >
                <div class="mt-4"></div>

                <div class="form-group row">
                    <label for="atrTopic" class="col-sm-1 col-form-label">Topic:</label>
                    <div class="input-group col-sm-11" id="atrTopic">
                        <InputText class="form-control" @bind-Value="@Note.Topic" />
                        <div class="input-group-append">
                            <label class="btn btn-outline-secondary" data-toggle="tooltip" title="Note number (automatically assigned)">
                                #@Note.NoteNumber
                            </label>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => Note.Topic)" />
                </div>

                <div class="form-group row">
                    <label for="atrFolder" class="col-sm-1 col-form-label">Folder:</label>
                    <div class="input-group col-sm-11" id="atrFolder">
                        <input type="text" disabled class="form-control" @bind="@Note.FolderDto.Name" />
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" @onclick="@OnFolderSelector"
                                    data-toggle="tooltip" title="Select folder">
                                ...&nbsp;<i class="fa fa-folder" aria-hidden="true"></i>
                            </button>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => Note.FolderId)" />
                </div>

                <div class="form-group row">
                    <label for="atrTags" class="col-sm-1 col-form-label">Tags:</label>
                    <div class="input-group col-sm-11" id="atrTags">
                        <InputText class="form-control" @bind-Value="@Note.Tags" />
                    </div>
                    <ValidationMessage For="@(() => Note.Tags)" />
                </div>

                <div class="form-group row">
                    <label for="atrPriority" class="col-sm-1 col-form-label">Priority:</label>
                    <div class="input-group col-sm-5" id="atrPriority">
                        <InputNumber class="form-control col-sm-11" @bind-Value="@Note.Priority" />
                        <ValidationMessage For="@(() => Note.Priority)" />
                    </div>

                    <label for="atrNoteType" class="col-sm-1 col-form-label">Type:</label>
                    <div class="input-group col-sm-5" id="atrNoteType">
                        <InputSelect class="form-control col-sm11"
                                        Value="@Note.NoteTypeId"
                                        ValueChanged="@((Guid? noteTypeId) => OnChangeNoteTypeActions(noteTypeId))"
                                        ValueExpression="@(() => Note.NoteTypeId)">
                            <option></option>
                            @if (NoteTypes != null)
                            {
                                @foreach (var ntype in NoteTypes)
                                {
                                    <option value=@ntype.NoteTypeId>@ntype.Name</option>
                                }
                            }
                        </InputSelect>                
                        <ValidationMessage For="@(() => Note.NoteTypeId)" />
                    </div>
                </div>

                <div class="form-group form-markdown">
                    <InputMarkdown @bind-Value="@Note.Description"
                                   For="@(() => Note.Description)" Label="Description:"></InputMarkdown>

                </div>
            
            </RadzenTabsItem>
            
            <RadzenTabsItem Text="&nbsp;Attributes" Icon="fact_check">
                <div class="mt-4"></div>
                <NoteKAttributes @ref="noteKAttributes" Attributes="Note.KAttributesDto"></NoteKAttributes>
            </RadzenTabsItem>
            
            <RadzenTabsItem Text="&nbsp;Resources" Icon="upload_file">
                <div class="mt-2"></div>
                @if (resources == null)
                {
                    <p>Loading resources ...</p>
                }
                else
                {
                    <NoteKResources Resources="resources"
                                    OnDelete="OnDeleteResource"
                                    OnInsertInDesription="InsertInDescription"
                                    OnNew="OnNewResource">
                    </NoteKResources>
                }
            </RadzenTabsItem>
            
            <RadzenTabsItem Text="&nbsp;Tasks" Icon="task">
                <div class="mt-2"></div>
                @if (tasks == null)
                {
                    <p>Loading tasks ...</p>
                }
                else
                {
                    <NoteKTasks Tasks="tasks"
                                OnDelete="OnDeleteTask"
                                OnNew="OnNewTask"
                                OnEdit="OnEditTask">
                    </NoteKTasks>
                }
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>

    <KntResourceSelector @ref="kntResourceSelector" OnCancel="OnCancelResourceSelector" OnConfirm="OnConfirmResourceSelector"></KntResourceSelector>

    <KntTaskEditor @ref="kntTaskEditor" OnCancel="OnCancelTaskEditor" OnConfirm="OnConfirmTaskEditor" Users="users"></KntTaskEditor>

</EditForm>

@code {
    [Parameter] public string Title { get; set; } = "---";
    [Parameter] public NoteDto Note { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnValidSubmitWithNew { get; set; }
    [Parameter] public EventCallback OnExit { get; set; }
    [Parameter] public List<NoteTypeDto> NoteTypes { get; set; } 

    private List<ResourceInfoDto> resources;
    private List<NoteTaskDto> tasks; // !!! { get; set; }
    private NoteTaskDto taskEdit; 
    private List<UserDto> users;
    private Guid? oldNoteType = null;

    // TODO: !!! eliminar las siguientes líneas
    private KntResourceSelector kntResourceSelector;
    private KntTaskEditor kntTaskEditor;
    // !!!!!!!!!!!!!!!!!!!!!!!!

    private NoteKAttributes noteKAttributes;
    
    private int tabsSelectedIndex { get; set; } = 0;

    #region Initialized

    protected override async Task OnInitializedAsync()
    {
        var result = await webApiService.Users.GetAllAsync();
        if (result.IsValid)
        {
            users = result.Entity;
        }
        else
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Get user for note edit", Detail =  result.Message, Duration = 12000 });
        }

        oldNoteType = Note.NoteTypeId;
       
        await base.OnInitializedAsync();
    }

    #endregion

    #region Data managment

    protected async Task Save(EditContext formContext, bool saveAndNew)
    {
        string addMessage = "";

        bool formIsValid = formContext.Validate();

        foreach (var KAttribute in Note.KAttributesDto)
        {
            switch (KAttribute.KAttributeDataType)
            {
                case EnumKAttributeDataType.String:
                    KAttribute.Value = KAttribute.ValueString;
                    break;
                case EnumKAttributeDataType.TextArea:
                    KAttribute.Value = KAttribute.ValueString;
                    break;
                case EnumKAttributeDataType.Int:                    
                    KAttribute.Value = KAttribute.ValueInt.ToString();
                    break;
                case EnumKAttributeDataType.Double:                    
                    KAttribute.Value = KAttribute.ValueDouble.ToString();
                    break;
                case EnumKAttributeDataType.DateTime:                    
                    KAttribute.Value = KAttribute.ValueDateTime.ToString();
                    break;
                case EnumKAttributeDataType.Bool:
                    KAttribute.Value = KAttribute.ValueBool.ToString();
                    break;
                case EnumKAttributeDataType.TabulatedValue:
                    KAttribute.Value = KAttribute.ValueTabulate;
                    break;
                case EnumKAttributeDataType.TagsValue:
                    KAttribute.Value = KAttribute.ValueTags;
                    break;
                default:
                    break;
            }

            if (KAttribute.RequiredValue == true && string.IsNullOrEmpty(KAttribute.Value))
            {
                formIsValid = false;
                addMessage += $" {KAttribute.Name} is required.";
            }
        }

        if (formIsValid == false)
        {            
            var msgErr = "Incorrect data, check the required attributes. " + addMessage;
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save note", Detail =  msgErr, Duration = 12000 });
            return;
        }

        if (saveAndNew)
            await OnValidSubmitWithNew.InvokeAsync(formContext);
        else
            await OnValidSubmit.InvokeAsync(formContext);
    }

    #endregion

    #region Panel managment

    private async Task ShowPanel(int panel)
    {        
        if (panel == 2 && resources == null)
        {
            var result = await webApiService.Notes.GetResourcesAsync(Note.NoteId);
            if (!result.IsValid)                
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Get resources for this note", Detail =  result.Message, Duration = 12000 });
            else
                resources = result.Entity;
        }

        if (panel == 3 && tasks == null)
        {
            var result = await webApiService.Notes.GetNoteTasksAsync(Note.NoteId);
            if (!result.IsValid)                
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Get tasks for this note", Detail =  result.Message, Duration = 12000 });
            else
                tasks = result.Entity;
        }

        StateHasChanged();
    }

    #endregion

    #region Managment FolderSelector

    private async Task OnFolderSelector()
    {        
        var res = await dialogService.OpenAsync<KntFolderSelector>($"Folder selector",
               new Dictionary<string, object>() {  },
               new DialogOptions() { Width = "700px", Height = "520px"});        

        if(res != null)
        {
            var f = (FolderDto)res;
            Note.FolderDto = f.GetSimpleDto<FolderDto>();
            Note.FolderId = f.FolderId;
        }
    }

    #endregion

    #region Managment ResourceSelector

    private void OnNewResource()
    {
        if (Note.IsNew())
        {            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "New resource for this note", Detail =  "You must save the note before assigning resources to it.", Duration = 12000 });
        }
        else
            kntResourceSelector.Show();
    }

    private async Task OnConfirmResourceSelector(ResourceInfoDto resource)
    {
        resource.NoteId = Note.NoteId;
        resource.Name = Note.NoteId.ToString() + "_" + resource.Name;

        var result = await webApiService.Notes.SaveResourceAsync(resource);
        if (!result.IsValid)            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save resource for this note", Detail =  result.Message, Duration = 12000 });
        else
            resources.Add(result.Entity);

        kntResourceSelector.Hide();
    }

    private void OnCancelResourceSelector()
    {
        kntResourceSelector.Hide();
    }

    private async Task OnDeleteResource(ResourceInfoDto resource)
    {
        var result = await webApiService.Notes.DeleteResourceAsync(resource.ResourceId);
        if (!result.IsValid)            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Delete resource for this note", Detail =  result.Message, Duration = 12000 });
        else
            resources.Remove(resource);
    }

    private void InsertInDescription(ResourceInfoDto resource)
    {
        if (resource.FileType == "image/jpeg")
            Note.Description += "\n\n![alt text](" + resource?.RelativeUrl + " '" + resource?.Description + "' )";
        else
            Note.Description += "\n\n<a href=" + resource?.RelativeUrl + " target='_blank'>" + resource?.Description + "</a>";
        
        tabsSelectedIndex = 0;
        StateHasChanged();        
    }

    #endregion

    #region Tasks managment

    private void OnNewTask()
    {
        if (Note.IsNew())
        {            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "New task for this note", Detail =  "You must save the note before assigning tasks to it.", Duration = 12000 });
        }
        else
        {
            taskEdit = null;
            kntTaskEditor.Show(null);
        }
    }

    private async Task OnConfirmTaskEditor(NoteTaskDto task)
    {
        task.NoteId = Note.NoteId;

        var result = await webApiService.Notes.SaveNoteTaskAsync(task);
        if (!result.IsValid)            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save task for this note", Detail =  result.Message, Duration = 12000 });
        else
        {
            var taskUpdated = result.Entity;

            var taskOld = tasks.Where(t => t.NoteTaskId == taskUpdated.NoteTaskId).SingleOrDefault();

            if (taskOld == null)
                tasks.Add(taskUpdated);
            else
            {
                var i = tasks.IndexOf(taskOld);
                tasks.RemoveAt(i);
                tasks.Insert(i, taskUpdated);
            }
            kntTaskEditor.Hide();
        }
    }

    private void OnCancelTaskEditor()
    {
        kntTaskEditor.Hide();
    }

    private async Task OnDeleteTask(NoteTaskDto task)
    {
        var result = await webApiService.Notes.DeleteNoteTaskAsync(task.NoteTaskId);
        if (!result.IsValid)            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Delete task for this note", Detail =  result.Message, Duration = 12000 });
        else
            tasks.Remove(task);
    }

    private void OnEditTask(NoteTaskDto task)
    {
        taskEdit = task;
        kntTaskEditor.Show(taskEdit);
    }

    #endregion

    #region NoteType change control

    private async Task OnChangeNoteTypeActions(Guid? noteType)
    {
        Note.NoteTypeId = noteType;

        if (Note.NoteTypeId == null)
        {
            Note.KAttributesDto.RemoveAll(_ => _.KAttributeNoteTypeId != null);

            oldNoteType = null;
            Note.NoteTypeDto = null;
            return;
        }

        if (Note.NoteTypeId == oldNoteType)
            return;

        var result = await webApiService.KAttributes.GetAllAsync(Note.NoteTypeId);
        if (!result.IsValid)
        {            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Get attributes for this note", Detail =  result.Message, Duration = 12000 });
        }
        else
        {
            var listA = result.Entity;

            Note.KAttributesDto.RemoveAll(_ => _.KAttributeNoteTypeId != null);

            foreach (var a in listA)
            {
                var newA = a.GetSimpleDto<NoteKAttributeDto>();
                newA.NoteId = Note.NoteId;
                newA.KAttributeNoteTypeId = Note.NoteTypeId;
                Note.KAttributesDto.Add(newA);
            }

            foreach (var a in Note.KAttributesDto)
            {
                if (a.KAttributeDataType == EnumKAttributeDataType.TabulatedValue)
                    a.TabulatedValues = await noteKAttributes.GetTabulatedValues(a.KAttributeId);
                if (a.KAttributeDataType == EnumKAttributeDataType.TagsValue)
                    a.TagsValues = await noteKAttributes.GetTagsValues(a.KAttributeId, "");
            }

            Note.NoteTypeDto = NoteTypes.Where(_ => _.NoteTypeId == Note.NoteTypeId).FirstOrDefault();
            oldNoteType = Note.NoteTypeId;
        }

    }

    #endregion

}


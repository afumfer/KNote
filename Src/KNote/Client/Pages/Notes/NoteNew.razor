@page "/notes/new/{PageReturn}"

@inject AppState appState
@inject IWebApiService webApiService
@inject NavigationManager navigationManger
@inject IShowMessages showMessages

@attribute [Authorize(Roles = "Staff, ProjecManager, Admin")]

@if (showForm)
{
    <NoteForm Title=@title Note="note" OnValidSubmit="OnSave" OnValidSubmitWithNew="OnSaveAndNew" OnExit="OnExit" NoteTypes="noteTypes"></NoteForm>
}
else
{
    <text>Loading ... </text>
}

@code {

    [Parameter] public string PageReturn { get; set; }

    private NoteDto note;
    private bool showForm = false;
    private List<NoteTypeDto> noteTypes = new List<NoteTypeDto>();

    private string title = "Note new";

    #region Initialize and dispose

    protected async override Task OnInitializedAsync()
    {
        appState.OnChange += StateHasChanged;

        var result = await webApiService.NoteTypes.GetAllAsync();
        if (!result.IsValid)
        {
            await showMessages.ShowErrorMessage(result.Message);
        }
        else
        {
            noteTypes = result.Entity;
            await GetNewNote();
        }

        if (PageReturn == null)
            PageReturn = "index";
        else if (PageReturn == "tree")
            PageReturn = "notes/tree";

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    #endregion

    #region Data methods

    private async Task GetNewNote()
    {
        var result = await webApiService.Notes.NewAsync();
        if (!result.IsValid)
        {
            await showMessages.ShowErrorMessage(result.Message);
        }
        else
        {
            note = result.Entity;
            if (appState.SelectedFolder != null)
            {
                note.FolderDto = appState.SelectedFolder.GetSimpleDto<FolderDto>();
                note.FolderId = appState.SelectedFolder.FolderId;
            }
            note.ContentType = "markdown";
            note.SetIsNew(true);
            showForm = true;
        }
    }

    private async Task SaveNote()
    {
        if (note.IsNew())
        {
            var result = await webApiService.Notes.SaveAsync(note);

            if (!result.IsValid)
            {
                await showMessages.ShowErrorMessage(result.Message);
            }
            else
            {
                var entitySaved = result.Entity;

                // TODO: Hack ... bucar una implementación más eficiente.
                //       Se refrescan valores asignados automáticamente
                //       en la capa de negocio.

                foreach (var atrSaved in entitySaved.KAttributesDto)
                {
                    foreach (var atrEdit in note.KAttributesDto)
                    {
                        if (atrEdit.KAttributeId == atrSaved.KAttributeId)
                        {
                            atrEdit.NoteKAttributeId = atrSaved.NoteKAttributeId;
                        }
                    }
                }
                note.NoteNumber = entitySaved.NoteNumber;
                note.NoteId = entitySaved.NoteId;
                note.SetIsNew(false);

                await showMessages.ShowOkMessage("Note successfully updated.");
                title = "Note edit";
            }
        }
        else
        {
            var result = await webApiService.Notes.SaveAsync(note);

            if (!result.IsValid)            
                await showMessages.ShowErrorMessage(result.Message);            
            else            
                await showMessages.ShowOkMessage("Note successfully updated.");
            
        }
    }

    #endregion

    #region Events managment

    private async Task OnSave()
    {
        await SaveNote();
    }

    private async Task OnSaveAndNew()
    {
        await SaveNote();
        await GetNewNote();
    }

    private void OnExit()
    {
        navigationManger.NavigateTo(PageReturn);
    }

    #endregion

}

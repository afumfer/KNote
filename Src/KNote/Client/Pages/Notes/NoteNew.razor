@page "/notes/new/{PageReturn}"

@implements IDisposable

@inject IStore store
@inject DialogService dialogService

@attribute [Authorize(Roles = "Staff, ProjecManager, Admin")]


<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" ConfirmExternalNavigation=true />

@if (showForm)
{
    <NoteForm Title=@title Note="note" OnValidSubmit="OnSave" OnValidSubmitWithNew="OnSaveAndNew" OnExit="OnExit" NoteTypes="noteTypes"></NoteForm>
}
else
{
    <text>Loading ... </text>
}

@code {

    [Parameter] public string? PageReturn { get; set; }

    private NoteDto? note;
    private bool showForm = false;
    private List<NoteTypeDto> noteTypes = new List<NoteTypeDto>();
    private AppState appState = null!;
    private string title = "Note new";

    #region Initialize and dispose

    protected async override Task OnInitializedAsync()
    {
        appState = store.AppState;
        appState.OnChange += StateHasChanged;

        var result = await store.NoteTypes.GetAllAsync();
        if (result.IsValid)
        {
            noteTypes = result.Entity;
            await GetNewNote();
        }

        if (PageReturn == null)
            PageReturn = "index";
        else if (PageReturn == "tree")
            PageReturn = "notes/tree";

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    #endregion

    #region Data methods

    private async Task GetNewNote()
    {
        var result = await store.Notes.NewAsync();
        if (result.IsValid)
        {
            note = result.Entity;
            if (appState.IsSelectedFolder())
            {
                note.FolderDto = appState.SelectedFolder.GetSimpleDto<FolderDto>();
                note.FolderId = appState.SelectedFolder.FolderId;
            }            
            note.SetIsNew(true);
            note.SetIsDirty(false);
            showForm = true;
        }
    }

    private async Task SaveNote()
    {
        var result = await store.Notes.SaveAsync(note);

        if (result.IsValid)
        {
            var entitySaved = result.Entity;

            // TODO: Hack ... bucar una implementación más eficiente.
            //       Se refrescan valores asignados automáticamente
            //       en la capa de negocio.

            foreach (var atrSaved in entitySaved.KAttributesDto)
            {
                foreach (var atrEdit in note.KAttributesDto)
                {
                    if (atrEdit.KAttributeId == atrSaved.KAttributeId)
                    {
                        atrEdit.NoteKAttributeId = atrSaved.NoteKAttributeId;
                        atrEdit.NoteId = atrSaved.NoteId;
                    }
                }
            }
            if (note.IsNew())
            {
                note.NoteNumber = entitySaved.NoteNumber;
                note.NoteId = entitySaved.NoteId;
                note.SetIsNew(false);

                title = "Note edit";                
            }
            note.SetIsDirty(false);
        }        
    }

    #endregion

    #region Events managment

    private async Task OnSave()
    {
        await SaveNote();
    }

    private async Task OnSaveAndNew()
    {
        await SaveNote();
        await GetNewNote();
    }

    private void OnExit()
    {
        store.NavigateTo(PageReturn);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        if (note == null)
            return;

        if (note.IsDirty())
        {
            var resultDialog = await dialogService.Confirm(
                @"Do you want to leave the page and lose your changes?",
                $"{KntConst.AppName}",
                new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (resultDialog != true)
            {
                context.PreventNavigation();
            }
        }
    }

    #endregion

}

@inject IStore webApiService
@inject NotificationService notificationService


@foreach (var KAttribute in Attributes)
{
    <div class="form-group row">
        <label for="atrTags" class="col-sm-3 col-form-label border-top">
            @KAttribute.Name
            @if (KAttribute.RequiredValue)
            {
                <span>(*)</span>
            }
            :
        </label>
        
        <div class="input-group col-sm-9 border pt-1 pb-1" id="atrTags">
            @if (KAttribute.KAttributeDataType == EnumKAttributeDataType.String)
            {
                <InputText class="form-control" @bind-Value="@KAttribute.ValueString" />
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.TextArea)
            {
                <InputTextArea class="form-control p-2" @bind-Value="@KAttribute.ValueString" />
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.DateTime)
            {
                <InputDate class="form-control" @bind-Value="@KAttribute.ValueDateTime" />
                @*<ValidationMessage For="@(() => KAttribute.ValueDateTime)" />*@
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.Int)
            {
                <InputNumber class="form-control" @bind-Value="@KAttribute.ValueInt" />
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.Double)
            {
                <InputNumber class="form-control" @bind-Value="@KAttribute.ValueDouble" />
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.Bool)
            {
                <InputCheckbox class="form-control" @bind-Value="@KAttribute.ValueBool" />
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.TagsValue)
            {
                <MultiSelectList Items="KAttribute.TagsValues" OnAttributeChange="(it) => onAttributeChange(KAttribute, it)" />
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.TabulatedValue)
            {
                <select class="form-control" @bind="@KAttribute.ValueTabulate">
                    <option></option>
                    @foreach (var item in KAttribute.TabulatedValues)
                    {
                        <option value=@item.Value @key="item.KAttributeTabulatedValueId">@item.Value</option>
                    }
                </select>
            }
        </div>
    </div>
}

@code {
    [Parameter] public List<NoteKAttributeDto> Attributes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        foreach (var KAttribute in Attributes)
        {
            switch (KAttribute.KAttributeDataType)
            {
                case EnumKAttributeDataType.String:
                    KAttribute.ValueString = KAttribute.Value;
                    break;
                case EnumKAttributeDataType.TextArea:
                    KAttribute.ValueString = KAttribute.Value;
                    break;
                case EnumKAttributeDataType.Int:
                    int val;
                    if (int.TryParse(KAttribute.Value, out val))
                        KAttribute.ValueInt = val;
                    break;
                case EnumKAttributeDataType.Double:
                    double valD;
                    if (double.TryParse(KAttribute.Value, out valD))
                        KAttribute.ValueDouble = valD;
                    break;
                case EnumKAttributeDataType.DateTime:
                    DateTime valDT;
                    if (DateTime.TryParse(KAttribute.Value, out valDT))
                        KAttribute.ValueDateTime = valDT;
                    break;
                case EnumKAttributeDataType.Bool:
                    bool valB;
                    if (bool.TryParse(KAttribute.Value, out valB))
                        KAttribute.ValueBool = valB;
                    break;
                case EnumKAttributeDataType.TabulatedValue:
                    KAttribute.TabulatedValues = await GetTabulatedValues(KAttribute.KAttributeId);
                    KAttribute.ValueTabulate = KAttribute.Value;
                    break;
                case EnumKAttributeDataType.TagsValue:
                    KAttribute.TagsValues = await GetTagsValues(KAttribute.KAttributeId, KAttribute.Value);
                    KAttribute.ValueTags = KAttribute.Value;
                    break;
                default:
                    break;
            }
        }

        await base.OnInitializedAsync();
    }

    public async Task<List<KAttributeTabulatedValueDto>> GetTabulatedValues(Guid idAttribute)
    {
        var result = await webApiService.KAttributes.GetKAttributeTabulatedValuesAsync(idAttribute);
        if (!result.IsValid)
        {            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Loading attribute tabulated values.", Detail = result.Message, Duration = 12000 });
            return new List<KAttributeTabulatedValueDto>();
        }
        else
        {
            return result.Entity.ToList();
        }
    }

    public async Task<List<MultiSelectListDto>> GetTagsValues(Guid idAttribute, string tags)
    {
        List<MultiSelectListDto> tagsSel;

        var result = await webApiService.KAttributes.GetKAttributeTabulatedValuesAsync(idAttribute);
        if (!result.IsValid)
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Loading attribute tabulated values.", Detail = result.Message, Duration = 12000 });
            tagsSel = new List<MultiSelectListDto>();
        }
        else
        {
            var tagsList = result.Entity.ToList();
            tagsSel = new List<MultiSelectListDto>();

            foreach (var t in tagsList)
            {
                var selected = false;
                if (tags?.IndexOf(t.Value.ToString()) >= 0)
                    selected = true;

                tagsSel.Add(new MultiSelectListDto(selected, t.Value.ToString(), t.Value.ToString()));
            }
        }

        return tagsSel;
    }

    private void onAttributeChange(NoteKAttributeDto item, string value)
    {
        item.ValueTags = value;

        foreach (var t in item.TagsValues)
        {
            var selected = false;
            if (value.IndexOf(t.Value.ToString()) >= 0)
                selected = true;

            t.Selected = selected;
        }
    }

}

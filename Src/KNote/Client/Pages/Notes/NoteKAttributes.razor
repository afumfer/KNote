@inject IShowMessages showMessages
@inject IKntClientDataService  dataService
@inject NavigationManager navigationManager


@foreach (var KAttribute in Attributes)
{
    <div class="form-group row">
        <label for="atrTags" class="col-sm-4 col-form-label">
            @KAttribute.Name 
            @if (KAttribute.RequiredValue)
            {
               <span>(*)</span>
            }
            :
        </label>

        <div class="input-group col-sm-8" id="atrTags">
            @if (KAttribute.KAttributeDataType == EnumKAttributeDataType.String)
            {
                <InputText class="form-control" @bind-Value="@KAttribute.ValueString" />
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.TextArea)
            {
                <InputTextArea class="form-control p-2" @bind-Value="@KAttribute.ValueString" />                                
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.DateTime)
            {
                <InputDate class="form-control" @bind-Value="@KAttribute.ValueDateTime" />
                @*<ValidationMessage For="@(() => KAttribute.ValueDateTime)" />*@
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.Int)
            {
                <InputNumber class="form-control" @bind-Value="@KAttribute.ValueInt" />
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.Double)
            {
                <InputNumber class="form-control" @bind-Value="@KAttribute.ValueDouble" />
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.Bool)
            {
                <InputCheckbox class="form-control" @bind-Value="@KAttribute.ValueBool" />
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.TagsValue)
            {
                <MultiSelectList Items="KAttribute.TagsValues" OnItemChange="(() => onItemChange(KAttribute))" />
            }
            else if (KAttribute.KAttributeDataType == EnumKAttributeDataType.TabulatedValue)
            {
                <select class="form-control" @bind="@KAttribute.ValueTabulate">
                    <option></option>
                    @foreach (var item in KAttribute.TabulatedValues)
                    {
                        <option value=@item.Value @key="item.KAttributeTabulatedValueId">@item.Value</option>
                    }
                </select>
            }
        </div>


    </div>
}

@code {
    [Parameter] public List<NoteKAttributeDto> Attributes { get; set; }


    protected override async Task OnInitializedAsync()
    {
        foreach (var KAttribute in Attributes)
        {
            switch (KAttribute.KAttributeDataType)
            {
                case EnumKAttributeDataType.String:
                    KAttribute.ValueString = KAttribute.Value;
                    break;
                case EnumKAttributeDataType.TextArea:
                    KAttribute.ValueString = KAttribute.Value;
                    break;
                case EnumKAttributeDataType.Int:
                    int val;
                    if (int.TryParse(KAttribute.Value, out val))
                        KAttribute.ValueInt = val;
                    break;
                case EnumKAttributeDataType.Double:
                    double valD;
                    if (double.TryParse(KAttribute.Value, out valD))
                        KAttribute.ValueDouble = valD;
                    break;
                case EnumKAttributeDataType.DateTime:
                    DateTime valDT;
                    if (DateTime.TryParse(KAttribute.Value, out valDT))
                        KAttribute.ValueDateTime = valDT;
                    break;
                case EnumKAttributeDataType.Bool:
                    bool valB;
                    if (bool.TryParse(KAttribute.Value, out valB))
                        KAttribute.ValueBool = valB;
                    break;
                case EnumKAttributeDataType.TabulatedValue:
                    KAttribute.TabulatedValues = await GetTabulatedValues(KAttribute.KAttributeId);
                    KAttribute.ValueTabulate = KAttribute.Value;
                    break;
                case EnumKAttributeDataType.TagsValue:
                    KAttribute.TagsValues = await GetTagsValues(KAttribute.KAttributeId, KAttribute.Value);
                    KAttribute.ValueTags = KAttribute.Value;
                    break;
                default:
                    break;
            }
        }

        await base.OnInitializedAsync();
    }

    public async Task<List<KAttributeTabulatedValueDto>> GetTabulatedValues(Guid idAttribute)
    {
        var httpResponse = await dataService.Get<Result<List<KAttributeTabulatedValueDto>>>($"api/kattributes/getattributetabulatedvalues/{idAttribute}");
        if (httpResponse.Error)
        {
            // TODO: Pending, thinking about how errors are displayed 
            //await showMessages.ShowErrorMessage(await httpResponse.GetBody());
            return new List<KAttributeTabulatedValueDto>();
        }
        else
        {
            return httpResponse.Response.Entity.ToList();
        }
    }

    public async Task<List<MultiSelectListDto>> GetTagsValues(Guid idAttribute, string tags)
    {
        List<MultiSelectListDto> tagsSel;

        var httpResponse = await dataService.Get<Result<List<KAttributeTabulatedValueDto>>>($"api/kattributes/getattributetabulatedvalues/{idAttribute}");
        if (httpResponse.Error)
        {
            // TODO: Pending, thinking about how errors are displayed 
            //await showMessages.ShowErrorMessage(await httpResponse.GetBody());
            tagsSel = new List<MultiSelectListDto>();
        }
        else
        {
            var tagsList = httpResponse.Response.Entity.ToList();
            tagsSel = new List<MultiSelectListDto>();

            foreach (var t in tagsList)
            {
                var selected = false;
                if (tags?.IndexOf(t.Value.ToString()) >= 0)
                    selected = true;

                tagsSel.Add(new MultiSelectListDto(selected, t.Value.ToString(), t.Value.ToString()));
            }
        }

        return tagsSel;
    }

    private void onItemChange(NoteKAttributeDto item)
    {
        item.ValueTags = string.Join(", ", item.TagsValues
            .Where(x => x.Selected == true)
            .Select(_ => _.Key).ToArray());
    }

}

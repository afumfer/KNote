@page "/folders"

@implements IDisposable

@inject IStore store
@inject TooltipService tooltipService
@inject DialogService dialogService

@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]


<div class="container-fluid border">
    <div class="row">
        <KntIndexHeader TextHead="Folders admin">
            <IndexMenu>
                <RadzenMenu>
                    <RadzenMenuItem Text="New folder ..." Icon="post_add"  Click="OnNew"></RadzenMenuItem>
                    <RadzenMenuItem Text="Refresh tree" Icon="refresh"  Click="OnRefreshTree" ></RadzenMenuItem>
                </RadzenMenu>
            </IndexMenu>
        </KntIndexHeader>
    </div>
</div>

<div class="container-fluid border pt-2">
    <div class="row">
        @if (foldersTree == null)
        {
            <p><em>Loading tree folders ...</em></p>
        }
        else
        {
            <KntFoldersTreeView FoldersInfo="foldersTree"
                                EditMode="true"
                                FolderSelected="OnFolderSelected"
                                FolderEdit="OnEdit"
                                FolderDelete="OnDelete" />
        }
    </div>
</div>


@code {

    private List<FolderDto>? foldersTree;
    private FolderDto selectedFolder;
    private AppState appState;

    protected override async Task OnInitializedAsync()    
    {
        appState = store.AppState;
        appState.OnChange += StateHasChanged;

        await Load();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    async Task Load()
    {
        selectedFolder = null;

        var result = await store.Folders.GetTreeAsync();
        if (result.IsValid)
            foldersTree = result.Entity;
        else
        {
            foldersTree = new List<FolderDto>();
        }

        appState.FoldersTree = foldersTree;

        if (appState.SelectedFolder == null)
        {
            if (foldersTree?.Count > 0)
            {
                var f = foldersTree.Select(x => x).FirstOrDefault();
                f.Selected = true;
                OnFolderSelected(f);
            }            
        }
        else 
            OnFolderSelected(appState.SelectedFolder.GetSimpleDto<FolderDto>());
    }

    void OnFolderSelected(FolderDto f)
    {
        selectedFolder = f;
        appState.SelectedFolder = selectedFolder.GetSimpleDto<FolderDto>();
    }

    async Task OnNew()
    {
        var res = await dialogService.OpenAsync<FolderNew>($"New folder",
               new Dictionary<string, object>() {  },
               new DialogOptions() { Width = "800px", Height = "600px", Resizable = true, Draggable = true });

        if(res != null)           
            await Load();  
    }

    async Task OnEdit(FolderDto folder)
    {
        var res = await dialogService.OpenAsync<FolderEdit>($"Edit folder",
               new Dictionary<string, object>() { { "FolderId", folder.FolderId.ToString() } },
               new DialogOptions() { Width = "800px", Height = "600px", Resizable = true, Draggable = true });

        if(res != null)        
            await Load(); 
    }


    async Task OnDelete(FolderDto folder)
    {
        var resultDialog = await dialogService.Confirm(
            $"Are you sure you want delete folder - {@folder.Name})?", 
            "Delete folder", 
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (resultDialog == true)
        {
            var result = await store.Folders.DeleteAsync(folder.FolderId);
            if (result.IsValid)                            
            {
                foldersTree = null;                
                await Load();
            }
        }
    }

    private async Task OnRefreshTree()
    {
        foldersTree = null;
        appState.FoldersTree = null;
        await Load();
    }
}

@page "/folders"

@inject IWebApiService webApiService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages
@inject AppState appState

@implements IDisposable

@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]

<div class="container-fluid bg-light border">
    <div class="row">
        <div class="col-6">
            <h3 class="pt-3">Folders admin</h3>
        </div>
        <div class="col-6">
            <span class="float-right">
                <RadzenMenu>
                    <RadzenMenuItem Text="New folder ..." Icon="post_add"  Click="GoNewFolder"></RadzenMenuItem>
                    <RadzenMenuItem Text="Refresh tree" Icon="refresh"  Click="OnRefreshTreeFolders" ></RadzenMenuItem>
                </RadzenMenu>
            </span>
        </div>
    </div>
</div>

<div class="container-fluid border pt-2">
    <div class="row">
        @if (foldersTree == null)
        {
            <p><em>Loading tree folders ...</em></p>
        }
        else
        {
            <KntFoldersTreeView FoldersInfo="foldersTree"
                                EditMode="true"
                                FolderSelected="OnFolderSelected"
                                FolderEdit="OnFolderEdit"
                                FolderDelete="OnFolderDelete" />
        }
    </div>
</div>

<ModalDialog @ref="modalDialog" Title="Delete folder" onConfirm="OnConfirmDelete" onCancel="OnCancelDelete">
    <div><p>Are you sure you want to delete folder "@itemDelete.Name" ?</p></div>
</ModalDialog>

@code {

    private List<FolderDto> foldersTree;
    private FolderDto folder;
    private ModalDialog modalDialog;
    private FolderDto itemDelete;

    protected override async Task OnInitializedAsync()
    {
        appState.OnChange += StateHasChanged;

        await Load();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private async Task Load()
    {
        folder = null;

        if (appState.FoldersTree == null)
        {
            var result = await webApiService.Folders.GetTreeAsync();
            if (!result.IsValid)
                foldersTree = new List<FolderDto>();
            else
                foldersTree = result.Entity;

            appState.FoldersTree = foldersTree;

            if (foldersTree?.Count > 0)
            {
                var f = foldersTree.Select(x => x).FirstOrDefault();
                f.Selected = true;
                OnFolderSelected(f);
            }
        }
        else
        {
            foldersTree = appState.FoldersTree;
            OnFolderSelected(appState.SelectedFolder.GetSimpleDto<FolderDto>());
        }
    }

    private void OnFolderSelected(FolderDto f)
    {
        folder = f;
        appState.SelectedFolder = folder.GetSimpleDto<FolderDto>();
    }

    private void OnFolderDelete(FolderDto folder)
    {
        modalDialog.Show();
        itemDelete = folder;
    }

    private async Task OnConfirmDelete()
    {
        modalDialog.Hide();

        var result = await webApiService.Folders.DeleteAsync(itemDelete.FolderId);
        if (!result.IsValid)
        {
            await showMessages.ShowErrorMessage(result.Message);
        }
        else
        {
            FolderDto toUpdate;
            if (itemDelete.ParentId == null)
            {
                if (appState.FoldersTree != null)
                    appState.FoldersTree.Remove(itemDelete);
            }
            else
            {
                if (appState.FoldersIndex.TryGetValue((Guid)itemDelete.ParentId, out toUpdate))
                {
                    if (toUpdate != null)
                    {
                        toUpdate.ChildFolders.Remove(itemDelete);
                        toUpdate.Selected = true;
                        toUpdate.Expanded = true;
                        OnFolderSelected(toUpdate);
                    }
                }
            }
        }

        itemDelete = null;
    }

    private void OnCancelDelete()
    {
        modalDialog.Hide();
        itemDelete = null;
    }

    private void OnFolderEdit(FolderDto folder)
    {
        navigationManager.NavigateTo($"folders/edit/{folder.FolderId}");
    }

    void GoNewFolder()
    {
        navigationManager.NavigateTo($"folders/new");
    }

    private async Task OnRefreshTreeFolders()
    {
        foldersTree = null;
        appState.FoldersTree = null;
        await Load();
    }
}

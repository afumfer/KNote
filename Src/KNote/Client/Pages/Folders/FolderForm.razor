@inject DialogService dialogService
@inject NotificationService notificationService

<EditForm Model="Folder" Context="formContext">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group">
        <label>Name:</label>
        <div class="input-group">
            <InputText class="form-control" @bind-Value="@Folder.Name" />
            <div class="input-group-append">
                <label class="btn btn-outline-secondary" data-toggle="tooltip" title="Folder number (automatically assigned)">
                    #@Folder.FolderNumber
                </label>
            </div>
        </div>
        <ValidationMessage For="@(() => Folder.Name)" />
    </div>

    <div class="form-group">
        <label>Tags:</label>
        <InputText class="form-control" @bind-Value="@Folder.Tags" />
        <ValidationMessage For="@(() => Folder.Tags)" />
    </div>

    <div class="form-group">
        <label>Order:</label>
        <InputNumber class="form-control" @bind-Value="@Folder.Order" />
        <ValidationMessage For="@(() => Folder.Order)" />
    </div>

    <div class="form-group">
        <label>Order notes:</label>
        <InputText class="form-control" @bind-Value="@Folder.OrderNotes" />
        <ValidationMessage For="@(() => Folder.OrderNotes)" />
    </div>

    <div class="form-group">
        <label>Parent folder:</label>
        <div class="input-group mb-3">
            <input type="text" disabled class="form-control" @bind="@nameParent" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="@OnResetParentFolder"
                        data-toggle="tooltip" title="Reset parent folder">
                    X
                </button>
                <button class="btn btn-outline-secondary" type="button" @onclick="@OnFolderSelector"
                        data-toggle="tooltip" title="Select folder">
                    ...&nbsp;<i class="fa fa-folder" aria-hidden="true"></i>
                </button>
            </div>
        </div>
        <ValidationMessage For="@(() => Folder.ParentId)" />
    </div>

    <hr />

    <div class="row">
        <div class="col-md-12 text-right">
            <RadzenButton Text="Save" Click="() => Save(formContext)" ButtonStyle="ButtonStyle.Primary" Class="mr-1"  />  
            <RadzenButton Text="Cancel" Click="() => OnExit.InvokeAsync(null)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" />                                       
        </div>
    </div>

</EditForm>

@code {
    [Parameter] [EditorRequired] public FolderDto Folder { get; set; }
    [Parameter] public string Title { get; set; } = "...";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnExit { get; set; }

    private string nameParent = "(root)";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Folder.ParentFolderDto != null)        
        {
            nameParent = Folder.ParentFolderDto.Name;
        }
        else
            OnResetParentFolder();       
    }

    protected async Task Save(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save folder.", Detail =  "Incorrect data, check the required attributes.", Duration = 12000 });
            return;
        }

        if (string.IsNullOrEmpty(nameParent))
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save folder.", Detail = "Parent folder can't be null value.", Duration = 12000 });
            return;
        }

        await OnValidSubmit.InvokeAsync(formContext);
    }

    #region Managment FolderSelector

    async Task OnFolderSelector()
    {        
        var res = await dialogService.OpenAsync<KntFolderSelector>($"Folder selector",
               new Dictionary<string, object>() {  },
               new DialogOptions() { Width = "700px", Height = "520px"});        

        if(res != null)
        {
            var f = (FolderDto)res;
            Folder.ParentId = f.FolderId;
            Folder.ParentFolderDto = f.GetSimpleDto<FolderDto>();
            nameParent = Folder.ParentFolderDto.Name;            
        }        
    }

    private void OnResetParentFolder()
    {
        Folder.ParentId = null;
        Folder.ParentFolderDto = null;
        nameParent = "(root)";
    }

    #endregion

}


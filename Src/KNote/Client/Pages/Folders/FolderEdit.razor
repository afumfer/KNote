@page "/folders/edit/{FolderId}"

@implements IDisposable

@inject IStore store 
@inject DialogService dialogService

@attribute [Authorize(Roles = "Admin, ProjecManager")]


@if (folder != null)
{
    <FolderForm Title="Folder edit" OnValidSubmit="OnSave" OnExit="OnExit" Folder="folder" />
}
else
{
    <text>Loading ... </text>
}

@code {

    [Parameter] public string FolderId { get; set; } = string.Empty;

    private FolderDto? folder;    

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        store.AppState.OnChange += StateHasChanged;

        Guid id;
        var parseOk = Guid.TryParse(FolderId, out id);
        if (!parseOk)
        {
            await dialogService.Alert("Invalid folder identifier.");
            dialogService.Close(null);
            return;
        }

        var result = await store.Folders.GetAsync(id);
        if (!result.IsValid)                    
            dialogService.Close(null);        
        else
            folder = result.Entity;        
    }

    public void Dispose()
    {
        store.AppState.OnChange -= StateHasChanged;
    }

    private async Task OnSave()
    {
        if (!folder!.IsDirty())
        {
            dialogService.Close(folder);
        }
        else
        {
            var result = await store.Folders.SaveAsync(folder!);
            if (result.IsValid)
            {
                if (store.AppState.FoldersTree != null)
                {
                    FolderDto? toUpdate;
                    store.AppState.FoldersIndex.TryGetValue(folder.FolderId, out toUpdate);
                    if (toUpdate != null)
                    {
                        if (toUpdate.ParentId == folder.ParentId)
                            toUpdate.Name = folder.Name;
                        else
                            store.AppState.FoldersTree = null;
                    }
                    else
                    {
                        store.AppState.FoldersTree = null;
                    }
                }            
                dialogService.Close(result.Entity);
            }            
        }
    }

    private void OnExit()
    {        
        dialogService.Close(null);
    }

}

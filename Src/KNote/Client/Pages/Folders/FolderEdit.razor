@page "/folders/edit/{FolderId}"

@inject AppState appState
@inject IWebApiService webApiService 
@inject DialogService dialogService
@inject NotificationService notificationService

@implements IDisposable

@attribute [Authorize(Roles = "Admin, ProjecManager")]

@if (folder != null)
{
    <FolderForm Title="Folder edit" OnValidSubmit="OnEdit" OnExit="OnExit" Folder="folder" />
}
else
{
    <text>Loading ... </text>
}

@code {    

    [Parameter] public string FolderId { get; set; }

    private FolderDto folder;

    protected async override Task OnInitializedAsync()
    {
        appState.OnChange += StateHasChanged;

        var result = await webApiService.Folders.GetAsync(Guid.Parse(FolderId));
        if (!result.IsValid)
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Get folder.", Detail =  result.Message, Duration = 12000 });
            dialogService.Close(null);
        }
        else        
            folder = result.Entity;
        
        base.OnInitialized();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private async Task OnEdit()
    {
        var result = await webApiService.Folders.SaveAsync(folder);
        if (!result.IsValid)                    
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save note type.", Detail =  result.Message, Duration = 12000 });        
        else
        {
            if (appState.FoldersTree != null)
            {
                FolderDto toUpdate;
                appState.FoldersIndex.TryGetValue(folder.FolderId, out toUpdate);
                if (toUpdate != null)
                {
                    if (toUpdate.ParentId == folder.ParentId)
                        toUpdate.Name = folder.Name;
                    else
                        appState.FoldersTree = null;
                }
                else
                {
                    appState.FoldersTree = null;
                }
            }
            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Save folder.", Detail =  "The data has been saved.", Duration = 3000 });
            dialogService.Close(result.Entity);     
        }
    }

    private void OnExit()
    {        
        dialogService.Close(null);
    }

}

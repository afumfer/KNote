@page "/folders/edit/{FolderId}"

@implements IDisposable

@inject IStore store 
@inject DialogService dialogService

@attribute [Authorize(Roles = "Admin, ProjecManager")]


@if (folder != null)
{
    <FolderForm Title="Folder edit" OnValidSubmit="OnEdit" OnExit="OnExit" Folder="folder" />
}
else
{
    <text>Loading ... </text>
}

@code {    

    [Parameter] public string FolderId { get; set; }

    private FolderDto folder;
    private AppState appState;

    protected async override Task OnInitializedAsync()
    {
        appState = store.AppState;
        appState.OnChange += StateHasChanged;

        var result = await store.Folders.GetAsync(Guid.Parse(FolderId));
        if (!result.IsValid)
        {            
            dialogService.Close(null);
        }
        else
            folder = result.Entity;

        base.OnInitialized();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private async Task OnEdit()
    {
        var result = await store.Folders.SaveAsync(folder);
        if (result.IsValid)
        {
            if (appState.FoldersTree != null)
            {
                FolderDto toUpdate;
                appState.FoldersIndex.TryGetValue(folder.FolderId, out toUpdate);
                if (toUpdate != null)
                {
                    if (toUpdate.ParentId == folder.ParentId)
                        toUpdate.Name = folder.Name;
                    else
                        appState.FoldersTree = null;
                }
                else
                {
                    appState.FoldersTree = null;
                }
            }            
            dialogService.Close(result.Entity);
        }
    }

    private void OnExit()
    {        
        dialogService.Close(null);
    }

}

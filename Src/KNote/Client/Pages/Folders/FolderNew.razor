@page "/folders/new"

@implements IDisposable

@inject IStore store 
@inject DialogService dialogService

@attribute [Authorize(Roles = "Admin, ProjecManager")]


<NavigationLock ConfirmExternalNavigation=true />

<FolderForm Title="New folder" OnValidSubmit="OnNew" OnExit="OnExit" Folder="folder" />

@code {

    private FolderDto folder = new FolderDto();
    private AppState appState = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        appState = store.AppState;
        appState.OnChange += StateHasChanged;

        if (appState != null)
        {            
            if(appState.IsSelectedFolder())
            {
                folder.ParentId = appState.SelectedFolder?.FolderId;
                folder.ParentFolderDto = appState.SelectedFolder.GetSimpleDto<FolderDto>();                
            }
            else
            {
                folder.ParentId = null;
                folder.ParentFolderDto = null;
            }
        }
        folder.SetIsDirty(false);        
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private async Task OnNew()
    {
        var result = await store.Folders.SaveAsync(folder);
        if (result.IsValid)
        {
            if (appState.FoldersTree != null)
            {
                FolderDto? toUpdate;
                var newFolder = result.Entity.GetSimpleDto<FolderDto>();
                newFolder.Selected = true;

                if (newFolder.ParentId == null)
                {
                    if (appState.FoldersTree != null)
                        appState.FoldersTree.Add(newFolder.GetSimpleDto<FolderDto>());
                }
                else
                {
                    Guid parentId = folder.ParentId ?? Guid.Empty;
                    if (appState.FoldersIndex.TryGetValue(parentId, out toUpdate))
                    {
                        if (toUpdate != null)
                        {
                            if (toUpdate.Expanded == true)
                            {
                                toUpdate.ChildFolders.Add(newFolder);
                                toUpdate.Selected = false;
                                toUpdate.Expanded = true;
                            }
                            else
                            {
                                appState.FoldersTree = null;
                            }
                        }
                        else
                        {
                            appState.FoldersTree = null;
                        }
                    }                                            
                }
            }            
            dialogService.Close(result.Entity);
        }
    }

    private async Task OnExit()
    {
        if (folder == null)
        {
            dialogService.Close(null);
            return;
        }

        if (folder.IsDirty())
        {
            var resultDialog = await dialogService.Confirm(
                @"Do you want to leave the page and lose your changes?",
                $"{KntConst.AppName}",
                new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (resultDialog == true)
            {
                dialogService.Close(null);
            }
        }
        else
        {
            dialogService.Close(null);
        }
    }

}

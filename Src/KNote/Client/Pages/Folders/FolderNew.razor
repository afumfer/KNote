@page "/folders/new"

@inject AppState appState
@inject IWebApiService webApiService 
@inject DialogService dialogService
@inject NotificationService notificationService

@implements IDisposable

@attribute [Authorize(Roles = "Admin, ProjecManager")]

<FolderForm Title="New folder" OnValidSubmit="OnNew" OnExit="OnExit" Folder="folder" />

@code {

    private FolderDto folder;

    protected override void OnInitialized()
    {
        appState.OnChange += StateHasChanged;

        folder = new FolderDto();
        if (appState != null)
        {
            if(appState.SelectedFolder != null)
            {
                folder.ParentId = appState.SelectedFolder.FolderId;
                folder.ParentFolderDto = appState.SelectedFolder.GetSimpleDto<FolderDto>();                
            }
        }
        base.OnInitialized();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private async Task OnNew()
    {
        var result = await webApiService.Folders.SaveAsync(folder);
        if (!result.IsValid)
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save folder", Detail =  folder.GetErrorMessage(), Duration = 12000 });
        }
        else
        {
            if (appState.FoldersTree != null)
            {
                FolderDto toUpdate;
                var newFolder = result.Entity.GetSimpleDto<FolderDto>();
                newFolder.Selected = true;

                // TODO: !!!
                //appState.folderOldSelected.Selected = false;

                if (newFolder.ParentId == null)
                {
                    if (appState.FoldersTree != null)
                        appState.FoldersTree.Add(newFolder.GetSimpleDto<FolderDto>());
                }
                else
                {
                    if (appState.FoldersIndex.TryGetValue((Guid)folder.ParentId, out toUpdate))
                    {
                        if (toUpdate != null)
                        {
                            if (toUpdate.Expanded == true)
                            {
                                toUpdate.ChildFolders.Add(newFolder);
                                toUpdate.Selected = false;
                                toUpdate.Expanded = true;
                            }
                            else
                            {
                                appState.FoldersTree = null;
                            }
                        }
                        else
                        {
                            appState.FoldersTree = null;
                        }
                    }
                }
            }

            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "New folder", Detail =  "The note type has been created.", Duration = 3000 });
            dialogService.Close(folder);            
        }

    }

    private void OnExit()
    {
       dialogService.Close(null);
    }

}

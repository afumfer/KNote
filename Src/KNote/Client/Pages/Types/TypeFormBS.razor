@inject IShowMessages showMessages

<EditForm Model="NoteType" Context="formContext">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <!-- Title -->
    <ToolingHeader Title="@Title">
        <Buttons>
            <button class="btn btn-success float-right ml-2" @onclick="(() => OnExit.InvokeAsync(null))" data-toggle="tooltip" title="Exit without save">
                <i class="fa fa-arrow-right" aria-hidden="true"></i>
            </button>
            <button class="btn btn-success float-right" @onclick="(() => Save(formContext))">Save changes</button>
        </Buttons>
    </ToolingHeader>

    <div class="form-group">
        <label>Name:</label>
        <InputText class="form-control" @bind-Value="@NoteType.Name" />
        <ValidationMessage For="@(() => NoteType.Name)" />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputText class="form-control" @bind-Value="@NoteType.Description" />
        <ValidationMessage For="@(() => NoteType.Description)" />
    </div>

</EditForm>

@code {
    [Parameter] public string Title { get; set; } = "---";
    [Parameter] public NoteTypeDto NoteType { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnExit { get; set; }

    protected async Task Save(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {
            await showMessages.ShowErrorMessage("Incorrect data, check the required attributes.");
            return;
        }

        await OnValidSubmit.InvokeAsync(formContext);
    }

}

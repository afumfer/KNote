@page "/types"

@inject IStore webApiService
@inject TooltipService tooltipService
@inject DialogService dialogService
@inject NotificationService notificationService

@attribute [Authorize(Roles = "Admin")]

<div class="container-fluid border">
    <div class="row">
        <KntIndexHeader TextHead="Note types admin">
            <IndexMenu>
                <RadzenMenu>
                    <RadzenMenuItem Text="New type ..." Icon="post_add"  Click="OnNew"></RadzenMenuItem>
                </RadzenMenu>
            </IndexMenu>
        </KntIndexHeader>
    </div>
</div>

<div class="container-fluid pt-2">
    <div class="row">
        <EntityList List="noteTypes">
            <ItemsFull>
                <RadzenDataGrid Data="@noteTypes" TItem="NoteTypeDto" AllowColumnResize="true" Density="@Density.Compact">
                    <Columns>
                        <RadzenDataGridColumn TItem="NoteTypeDto" Property="Name" Title="Name" />
                        <RadzenDataGridColumn TItem="NoteTypeDto" Property="Description" Title="Full name" />                
                        <RadzenDataGridColumn TItem="NoteTypeDto" Title="Actions" Width="100px" TextAlign="TextAlign.Center" >
                            <Template Context="data">                                                        
                                <RadzenButton Click="@(() => OnEdit(data))" Icon="edit" Size="ButtonSize.Small"
                                    ButtonStyle="ButtonStyle.Primary" 
                                    MouseEnter="@(args => tooltipService.Open(args, "Edit note type ...", new TooltipOptions(){ Position = TooltipPosition.Left }) )" Class="mr-0 mb-0"  />
                                <RadzenButton Click="@(() => OnDelete(data))" Icon="delete" Size="ButtonSize.Small"
                                    ButtonStyle="ButtonStyle.Danger" 
                                    MouseEnter="@(args => tooltipService.Open(args, "Delete note type ...", new TooltipOptions(){ Position = TooltipPosition.Left }) )" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns> 
                </RadzenDataGrid>
            </ItemsFull>
        </EntityList>
    </div>
</div>

@code {

    private List<NoteTypeDto> noteTypes { get; set; }    

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var result = await webApiService.NoteTypes.GetAllAsync();
        if (result.IsValid)
            noteTypes = result.Entity;
        else            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Loading note types.", Detail =  result.Message, Duration = 12000 });

        StateHasChanged();
    }

    async Task OnNew()
    {        
        var res = await dialogService.OpenAsync<TypeNew>($"New note type",
               new Dictionary<string, object>() {  },
               new DialogOptions() { Width = "700px", Height = "370px", Resizable = true, Draggable = true });

        if(res != null)           
            await Load();        
    }

    async Task OnEdit(NoteTypeDto noteType)
    {        
        var res = await dialogService.OpenAsync<TypeEdit>($"Edit note type",
               new Dictionary<string, object>() { { "TypeId", noteType.NoteTypeId.ToString() } },
               new DialogOptions() { Width = "700px", Height = "470px", Resizable = true, Draggable = true });

        if(res != null)        
            await Load();        
    }

    async Task OnDelete(NoteTypeDto item)
    {             
        var resultDialog = await dialogService.Confirm(
            $"Are you sure you want delete note type - {@item.Name})?", 
            "Delete note type", 
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (resultDialog == true)
        {
            var result = await webApiService.NoteTypes.DeleteAsync(item.NoteTypeId);
            if (!result.IsValid)            
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Delete note type.", Detail =  result.Message, Duration = 12000 });            
            else
            {
                noteTypes = null;
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Delete note type.", Detail =  "The note type has been deleted.", Duration = 3000 });
                await Load();
            }            
        }
    }

}

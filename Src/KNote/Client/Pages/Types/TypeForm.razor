@inject NotificationService notificationService

<EditForm Model="NoteType" Context="formContext">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group">
        <label>Name:</label>
        <InputText class="form-control" @bind-Value="@NoteType.Name" />
        <ValidationMessage For="@(() => NoteType.Name)" />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputText class="form-control" @bind-Value="@NoteType.Description" />
        <ValidationMessage For="@(() => NoteType.Description)" />
    </div>

   <hr class="mt-1" />

    <div class="row">
        <div class="col-md-12 text-right">
            <RadzenButton Text="Save" Click="() => Save(formContext)" ButtonStyle="ButtonStyle.Primary" Class="mr-1"  />  
            <RadzenButton Text="Cancel" Click="() => OnExit.InvokeAsync(null)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" />                                       
        </div>
    </div>

</EditForm>

@code {        
    [Parameter] [EditorRequired] public NoteTypeDto NoteType { get; set; } = null!;
    [Parameter] public string Title { get; set; } = "...";    
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnExit { get; set; }

    protected async Task Save(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save note type.", Detail =  "Incorrect data, check the required attributes.", Duration = 12000 });
            return;
        }

        await OnValidSubmit.InvokeAsync(formContext);
    }

}

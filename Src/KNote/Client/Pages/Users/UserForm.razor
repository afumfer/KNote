@inject NotificationService NotificationService

<EditForm Model="User" Context="formContext">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group row">
        <label for="atrUserName" class="col-sm-2 col-form-label">User name:</label>
        <div class="input-group col-sm-10" id="atrUserName">
            <InputText class="form-control" @bind-Value="@User.UserName" />                    
        </div>              
        <label class="col-sm-2 col-form-label" style="font-size:10px"></label>
        <div class="col-sm-10 pl-4"  style="font-size:10px">
            <ValidationMessage For="@(() => User.UserName)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="atrEmail" class="col-sm-2 col-form-label">Email:</label>
        <div class="input-group col-sm-10" id="atrEmail">
            <InputText class="form-control" @bind-Value="@User.EMail" />
        </div>        
        <label for="atrEmail" class="col-sm-2 col-form-label" style="font-size:10px"></label>
        <div class="col-sm-10 pl-4"  style="font-size:10px">
            <ValidationMessage For="@(() => User.EMail)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="atrFullName" class="col-sm-2 col-form-label">Full name:</label>
        <div class="input-group col-sm-10" id="atrFullName">
            <InputText class="form-control" @bind-Value="@User.FullName" />
        </div>
        <label class="col-sm-2 col-form-label" style="font-size:10px"></label>
        <div class="col-sm-10 pl-4"  style="font-size:10px">
            <ValidationMessage For="@(() => User.FullName)"/>
        </div>        
    </div>

    <div class="form-group row">

        <label for="atrRoles" class="col-sm-2 col-form-label">Roles:</label>
        <div class="input-group col-sm-10" id="atrRoles">                                      
            <RadzenCheckBoxList @bind-Value=@valuesRoles TValue="string" Orientation="Orientation.Horizontal" 
                            Data="@roles" TextProperty="Value" ValueProperty="Key" />
        </div>

        <label class="col-sm-2 col-form-label" style="font-size:10px"></label>
        <div class="col-sm-10 pl-4"  style="font-size:10px">
            <ValidationMessage For="@(() => User.RoleDefinition)" />
        </div>        
    </div>

    <hr class="mt-1" />

    <div class="row">
        <div class="col-md-12 text-right">
            <RadzenButton Text="Save" Click="() => Save(formContext)" ButtonStyle="ButtonStyle.Primary" Class="mr-1"  />  
            <RadzenButton Text="Cancel" Click="() => OnExit.InvokeAsync(null)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" />                                       
        </div>
    </div>

</EditForm>

@code {
    [Parameter] public string Title { get; set; } = "---";
    [Parameter] public UserDto User { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnExit { get; set; }

    List<MultiSelectListDto> roles = new List<MultiSelectListDto>();
    
    IEnumerable<string> valuesRoles;

    protected override void OnInitialized()
    {
        foreach (var r in KntConst.Roles)
        {
            var selected = false;
            if (User.RoleDefinition?.IndexOf(r.Key.ToString()) >= 0)
            {
                selected = true;                
            }

            roles.Add(new MultiSelectListDto(selected, r.Key.ToString(), r.Value));          
        }

        valuesRoles = roles
                .Where(x => x.Selected == true)
                .Select(_ => _.Key).ToArray();
       
        base.OnInitialized();
    }

    protected async Task Save(EditContext formContext)
    {
        User.RoleDefinition = GetRolesDefinition();

        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {            
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save user", Detail =  "Incorrect data, check the required attributes.", Duration = 12000 });
            return;
        }

        await OnValidSubmit.InvokeAsync(formContext);
    }

    private string GetRolesDefinition()
    {
        var strReturn = string.Join(", ", valuesRoles
            .Select(_ => _).ToArray());

        return strReturn;
    }
}

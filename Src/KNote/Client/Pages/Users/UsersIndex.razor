@page "/users"

@inject IWebApiService webApiService
@inject TooltipService tooltipService
@inject DialogService dialogService
@inject NotificationService notificationService

@attribute [Authorize(Roles = "Admin")]

<div class="container-fluid border">
    <div class="row">
        <KntIndexHeader TextHead="Users admin">
            <IndexMenu>
                <RadzenMenu>
                    <RadzenMenuItem Text="New user ..." Icon="post_add"  Click="OnNew"></RadzenMenuItem>
                </RadzenMenu>
            </IndexMenu>
        </KntIndexHeader>
    </div>
</div>

<div class="col-12 pt-2">
    <div class="row">
        <RadzenPager @ref="pager" ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" 
                HorizontalAlign="HorizontalAlign.Right" 
                Count="@((int)paginationContext.TotalCount)" 
                PageSize="@paginationContext.PageSize" PageNumbersCount="5" 
                PageChanged=@PageChanged />
    </div>
</div>

<div class="col-12">
    <div class="row">
        <EntityList List="users">
            <ItemsFull>
                <RadzenDataGrid Data="@users" TItem="UserDto" AllowColumnResize="true" Density="@Density.Compact">
                    <Columns>
                        <RadzenDataGridColumn TItem="UserDto" Property="UserName" Title="User name" />
                        <RadzenDataGridColumn TItem="UserDto" Property="FullName" Title="Full name" />
                        <RadzenDataGridColumn TItem="UserDto" Property="EMail" Title="Email"  />
                        <RadzenDataGridColumn TItem="UserDto" Property="RoleDefinition" Title="Roles" />                
                        <RadzenDataGridColumn TItem="UserDto" Title="Actions" Width="100px" TextAlign="TextAlign.Center" >
                            <Template Context="data">                                                        
                                <RadzenButton Click="@(() => OnEdit(data))" Icon="edit" Size="ButtonSize.Small"
                                    ButtonStyle="ButtonStyle.Primary" 
                                    MouseEnter="@(args => tooltipService.Open(args, "Edit user ...", new TooltipOptions(){ Position = TooltipPosition.Left }) )" Class="mr-0 mb-0"  />
                                <RadzenButton Click="@(() => OnDelete(data))" Icon="delete" Size="ButtonSize.Small"
                                    ButtonStyle="ButtonStyle.Danger" 
                                    MouseEnter="@(args => tooltipService.Open(args, "Delete user ...", new TooltipOptions(){ Position = TooltipPosition.Left }) )" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns> 
                </RadzenDataGrid>
            </ItemsFull>
        </EntityList>
    </div>
</div>

@code {

    List<UserDto> users { get; set; }
    //UserDto itemDelete;

    PaginationContext paginationContext = new PaginationContext();
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    RadzenPager pager;    

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task PageChanged(PagerEventArgs args)
    {
        await OnSelectedPage(args.PageIndex + 1);                
    }

    private async Task OnSelectedPage(int page)
    {        
        await Load(page);
    }

    private async Task Load(int page = 1)
    {
        paginationContext.CurrentPage = page;

        var result = await webApiService.Users.GetAllAsync(paginationContext.PageIdentifier);
        if (result.IsValid)
        {
            users = result.Entity;
            paginationContext.TotalCount = result.TotalCount;            
        }
        else        
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Loading users.", Detail =  result.Message, Duration = 12000 });

        StateHasChanged();
    }

    private string RolesDescriptions(string rolesString)
    {
        if (rolesString == null)
            return "";

        string rolesDes = "";
        var rolesCole = rolesString.Split(", ");
        foreach (var r in rolesCole)
        {
            Enum.TryParse(r, out EnumRoles myRol);
            var z = KntConst.Roles.Where(_ => _.Key == myRol).Select(_ => _.Value).FirstOrDefault();
            if (z != null)
            {
                if (rolesDes != "")
                    rolesDes += ", ";
                rolesDes += z;
            }
        }
        return rolesDes;
    }

    async Task OnNew()
    {        
        var res = await dialogService.OpenAsync<UserNew>($"New user",
               new Dictionary<string, object>() {  },
               new DialogOptions() { Width = "700px", Height = "470px", Resizable = true, Draggable = true });

        if(res != null)           
            await Load(paginationContext.CurrentPage);        
    }

    async Task OnEdit(UserDto user)
    {        
        var res = await dialogService.OpenAsync<UserEdit>($"Edit user",
               new Dictionary<string, object>() { { "UserId", user.UserId.ToString() } },
               new DialogOptions() { Width = "700px", Height = "470px", Resizable = true, Draggable = true });

        if(res != null)
        {
            await Load(paginationContext.CurrentPage);
        }        
    }

    async Task OnDelete(UserDto item)
    {                
        var resultDialog = await dialogService.Confirm(
            $"Are you sure you want delete user - {@item.UserName} - ({@item.FullName})?", 
            "Delete user", 
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (resultDialog == true)
        {
            var result = await webApiService.Users.DeleteAsync(item.UserId);
            if (!result.IsValid)            
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Delete user.", Detail =  result.Message, Duration = 12000 });            
            else
            {
                users = null;
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Delete user.", Detail =  "The user has been deleted.", Duration = 3000 });
                await Load();
            }            
        }
    }
    
}

@page "/users"

@inject IWebApiService webApiService
@inject NavigationManager navigationManager
@inject IShowMessages showMessages
@inject TooltipService tooltipService

@attribute [Authorize(Roles = "Admin")]

<div class="container-fluid bg-light border">
    <div class="row">
        <div class="col-6">
            <h3 class="pt-3">Users admin</h3>
        </div>
        <div class="col-6">
            <span class="float-right">
                <RadzenMenu>
                    <RadzenMenuItem Text="New user ..." Icon="post_add"  Click="OnNew"></RadzenMenuItem>
                </RadzenMenu>
            </span>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12 pt-2">
    <RadzenPager @ref="pager" ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" 
                            HorizontalAlign="HorizontalAlign.Right" 
                            Count="@((int)paginationContext.TotalCount)" 
                            PageSize="@paginationContext.PageSize" PageNumbersCount="5" 
                            PageChanged=@PageChanged />
    </div>
</div>

<div class="row">
    <div class="col-12">
        <EntityList List="users">
            <ItemsFull>
                <RadzenDataGrid Data="@users" TItem="UserDto" AllowColumnResize="true" >
                    <Columns>
                        <RadzenDataGridColumn TItem="UserDto" Property="UserName" Title="User name" />
                        <RadzenDataGridColumn TItem="UserDto" Property="FullName" Title="Full name" />
                        <RadzenDataGridColumn TItem="UserDto" Property="EMail" Title="Email"  />
                        <RadzenDataGridColumn TItem="UserDto" Property="RoleDefinition" Title="Roles" />                
                        <RadzenDataGridColumn TItem="UserDto" Title="Actions" Width="100px" TextAlign="TextAlign.Center" >
                            <Template Context="data">                                                        
                                <RadzenButton Click="@(() => OnEdit(data))" Icon="edit" 
                                    ButtonStyle="ButtonStyle.Primary" 
                                    MouseEnter="@(args => tooltipService.Open(args, "Edit user ...", new TooltipOptions(){ Position = TooltipPosition.Left }) )" Class="mr-0 mb-0"  />
                                <RadzenButton Click="@(() => OnDelete(data))" Icon="delete"
                                    ButtonStyle="ButtonStyle.Danger" 
                                    MouseEnter="@(args => tooltipService.Open(args, "Delete user ...", new TooltipOptions(){ Position = TooltipPosition.Left }) )" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns> 
                </RadzenDataGrid>
            </ItemsFull>
        </EntityList>
    </div>
</div>

<ModalDialog @ref="modalDialog" Title="Delete user" onConfirm="OnConfirmDelete" onCancel="OnCancelDelete">
    <div><p>Are you sure you want to delete user "@itemDelete.UserName (@itemDelete.FullName)" ?</p></div>
</ModalDialog>

@code {

    private List<UserDto> users { get; set; }
    private ModalDialog modalDialog;
    private UserDto itemDelete;

    PaginationContext paginationContext = new PaginationContext();
    private string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    private RadzenPager pager;

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }
    
    private async Task PageChanged(PagerEventArgs args)
    {
        await OnSelectedPage(args.PageIndex + 1);                
    }

    private async Task OnSelectedPage(int page)
    {
        await Load(page);
    }

    private async Task Load(int page = 1)
    {
        paginationContext.CurrentPage = page;

        var result = await webApiService.Users.GetAllAsync(paginationContext.PageIdentifier);
        if (result.IsValid)
        {
            users = result.Entity;
            paginationContext.TotalCount = result.TotalCount;
        }
        else
        {
            await showMessages.ShowErrorMessage(result.Message);
        }
    }

    private string RolesDescriptions(string rolesString)
    {
        if (rolesString == null)
            return "";

        string rolesDes = "";
        var rolesCole = rolesString.Split(", ");
        foreach (var r in rolesCole)
        {
            Enum.TryParse(r, out EnumRoles myRol);
            var z = KntConst.Roles.Where(_ => _.Key == myRol).Select(_ => _.Value).FirstOrDefault();
            if (z != null)
            {
                if (rolesDes != "")
                    rolesDes += ", ";
                rolesDes += z;
            }
        }
        return rolesDes;
    }

    void OnNew()
    {
        navigationManager.NavigateTo($"users/new");
    }

    void OnEdit(UserDto user)
    {
        navigationManager.NavigateTo($"users/edit/{user.UserId}");
    }

    private void OnDelete(UserDto item)
    {
        modalDialog.Show();
        itemDelete = item;
    }

    private async Task OnConfirmDelete()
    {
        modalDialog.Hide();

        var result = await webApiService.Users.DeleteAsync(itemDelete.UserId);
        if (!result.IsValid)
        {
            await showMessages.ShowErrorMessage(result.Message);
        }
        else
        {
            users = null;
            await Load();
        }

        itemDelete = null;
    }

    private void OnCancelDelete()
    {
        modalDialog.Hide();
        itemDelete = null;
    }
    
}

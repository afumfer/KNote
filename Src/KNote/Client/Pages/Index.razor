@page "/"
@page "/index"

@using KNote.Client.Pages.Notes

@inject AppState appState
@inject IStore webApiService
@inject NavigationManager navigationManager
@inject TooltipService tooltipService
@inject DialogService dialogService
@inject NotificationService notificationService

@implements IDisposable

@*@attribute [Authorize(Roles = "Public, Staff, ProjecManager, Admin")]*@

<div>
    <h3>@appState.AppName home page</h3>
    <p><i>@appInfo</i></p>
    
</div>

<hr />    

<div class="row">
    <div class="col-12">
        <NotesList Notes="notes" OnNoteDelete="OnNoteDelete" OnNoteEdit="OnNoteEdit" OnNoteView="OnNoteView" />
    </div>
</div>


@code {    

    private List<NoteInfoDto> notes;
    private NoteInfoDto itemDelete;
    private string appInfo;

    protected override async Task OnInitializedAsync()
    {
        appState.OnChange += StateHasChanged;

        appInfo = $"{appState.AppDescription} ({appState.AppVersion})";
        await LoadNotes();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    private async Task LoadNotes()
    {
        notes = null;
        var result = await webApiService.Notes.GetHomeNotesAsync();
        if (!result.IsValid)            
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Load notes ...", Detail = result.Message, Duration = 12000 });
        else
            notes = result.Entity;
    }

    private void OnNoteView(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/{note.NoteId}/index");
    }

    private void OnNoteEdit(NoteInfoDto note)
    {
        navigationManager.NavigateTo($"notes/edit/{note.NoteId}/index");
    }

    async Task OnNoteDelete(NoteInfoDto item)
    {
        var resultDialog = await dialogService.Confirm(
            $"Are you sure you want delete note - {@item.Topic} - ({@item.NoteNumber})?",
            "Delete note",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (resultDialog == true)
        {
            var result = await webApiService.Notes.DeleteAsync(item.NoteId);
            if (!result.IsValid)
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Delete note.", Detail = result.Message, Duration = 12000 });
            else
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Delete note.", Detail = "The note has been deleted.", Duration = 3000 });
                await LoadNotes();
            }
        }
    }

}

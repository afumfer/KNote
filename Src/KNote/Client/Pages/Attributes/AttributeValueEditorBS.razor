@inject IShowMessages showMessages

@if (ShowDialog)
{
    <EditForm Model="atrValue" Context="formContextValue">

        <div class="modal-backdrop show"></div>

        <div class="modal fade show" id="treeFolderModal" tabindex="-1"
             role="dialog" aria-labelledby="treeFolderModalLabel"
             aria-hidden="true" style="display: block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">@Title</h5>
                        <button @onclick="OnCancel" type="button" class="close" data-dismiss="modal"
                                aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="overflow-auto" style="height:450px">

                            <div class="form-group">
                                <label>Value:</label>
                                <InputText class="form-control p-2" @bind-Value="@atrValue.Value" />
                                <ValidationMessage For="@(() => atrValue.Value)" />
                            </div>

                            <div class="form-group">
                                <label>Order:</label>
                                <InputNumber class="form-control p-2" @bind-Value="@atrValue.Order" />
                                <ValidationMessage For="@(() => atrValue.Order)" />
                            </div>

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button @onclick="OnCancel" type="button" class="btn btn-secondary"
                                data-dismiss="modal">
                            Cancel
                        </button>
                        <button @onclick="(() => OnConfirmSave(formContextValue))" type="button" class="btn btn-primary">Ok</button>
                    </div>
                </div>
            </div>
        </div>

    </EditForm>
}

@code {
    [Parameter] public string Title { get; set; } = "Atribute tabulated value editor";
    [Parameter] public EventCallback<KAttributeTabulatedValueDto> OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private bool ShowDialog = false;
    private KAttributeTabulatedValueDto atrValue;

    public void Hide() => ShowDialog = false;

    public void Show(KAttributeTabulatedValueDto valueEdit)
    {
        if (valueEdit != null)
        {
            atrValue = valueEdit.GetSimpleDto<KAttributeTabulatedValueDto>();
            atrValue.SetIsNew(false);
        }
        else
        {
            atrValue = new KAttributeTabulatedValueDto();
            atrValue.KAttributeTabulatedValueId = Guid.NewGuid();
            atrValue.SetIsNew(true);
        }

        atrValue.SetIsDirty(false);
        ShowDialog = true;
    }

    private async Task OnConfirmSave(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid == false)
        {
            await showMessages.ShowErrorMessage("Incorrect data, check the required attributes.");
            return;
        }

        await OnConfirm.InvokeAsync(atrValue);
    }

}
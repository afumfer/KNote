
@inject IWebApiService webApiService
@inject IShowMessages showMessages
@inject NavigationManager navigationManager

<EditForm Model="KAttribute" Context="formContext">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <!-- Title -->
    <ToolingHeader Title="@Title">
        <Buttons>
            <button class="btn btn-success float-right ml-2" @onclick="(() => OnExit.InvokeAsync(null))" data-toggle="tooltip" title="Exit without save">
                <i class="fa fa-arrow-right" aria-hidden="true"></i>
            </button>
            <button class="btn btn-success float-right" @onclick="(() => Save(formContext))">Save changes</button>
        </Buttons>
    </ToolingHeader>

    <div class="form-group row">
        <label for="atrName" class="col-sm-2 col-form-label">Name:</label>
        <div class="input-group col-sm-10" id="atrName">
            <InputText class="form-control" @bind-Value="@KAttribute.Name" />
        </div>
        <ValidationMessage For="@(() => KAttribute.Name)" />
    </div>

    <div class="form-group row">
        <label for="atrDescription" class="col-sm-2 col-form-label">Description:</label>
        <div class="input-group col-sm-10" id="atrDescription">
            <InputTextArea class="form-control" @bind-Value="@KAttribute.Description" />
        </div>
        <ValidationMessage For="@(() => KAttribute.Description)" />
    </div>

    <div class="form-group row">
        <label for="atrRequired" class="col-sm-2 col-form-label">Required Value::</label>
        <div class="input-group col-sm-10" id="atrRequired">
            <InputCheckbox class="form-control" @bind-Value="@KAttribute.RequiredValue" />

        </div>
        <ValidationMessage For="@(() => KAttribute.RequiredValue)" />
    </div>

    <div class="form-group row">
        <label for="atrDataType" class="col-sm-2 col-form-label">Data Type:</label>
        <div class="input-group col-sm-10" id="atrDataType">
            <select class="form-control" @bind="@KAttribute.KAttributeDataType">
                @foreach (var item in KntConst.KAttributes.Keys)
                {
                    <option value=@item>@KntConst.KAttributes[item]</option>
                }
            </select>
        </div>
        <ValidationMessage For="@(() => KAttribute.KAttributeDataType)" />
    </div>

    @if (KAttribute.KAttributeDataType == EnumKAttributeDataType.TabulatedValue || KAttribute.KAttributeDataType == EnumKAttributeDataType.TagsValue)
    {
        <div class="form-group row">
            <label for="atrValues" class="col-sm-2 col-form-label">&nbsp;</label>
            <div class="input-group col-sm-10" id="atrDescription">
                <label class="float-left">Tabulated values for this attribute:</label>
                <span class="float-left ml-3">
                    <button class="btn btn-sm btn-light mr-2"
                            @onclick="@(() => OnAtrValueNew())"
                            data-toggle="tooltip" title="Add new value">
                        <i class="fa fa-plus"></i>
                    </button>
                </span>
                <table class="table table-sm table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th width="180px">Order</th>
                            <th width="100px" class="text-center">(Actions)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var value in KAttribute.KAttributeValues)
                        {
                            <tr>
                                <td>@value.Value</td>
                                <td width="100px">@value.Order</td>
                                <td width="100px">
                                    <span class="float-right">
                                        <button class="btn btn-sm btn-light mx-1"
                                                @onclick="@(() => OnAtrValueDelete(value))"
                                                data-toggle="tooltip" title="Delete value">
                                            <i class="fa fa-minus"></i>
                                        </button>
                                    </span>
                                    <span class="float-right">
                                        <button class="btn btn-sm btn-light mx-1"
                                                @onclick="@(() => OnAtrValueEdit(value))"
                                                data-toggle="tooltip" title="Edit value">
                                            <i class="fa fa-pencil"></i>
                                        </button>
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    <div class="form-group row">
        <label for="atrOrder" class="col-sm-2 col-form-label">Order:</label>
        <div class="input-group col-sm-10" id="atrOrder">
            <InputNumber class="form-control" @bind-Value="@KAttribute.Order" />
        </div>
        <ValidationMessage For="@(() => KAttribute.Order)" />
    </div>

    <div class="form-group row">
        <label for="atrType" class="col-sm-2 col-form-label">Note type:</label>
        <div class="input-group col-sm-10" id="atrType">
            <select class="form-control" @bind="@KAttribute.NoteTypeId">
                <option></option>
                @foreach (var ntype in NoteTypes)
                {
                    <option value=@ntype.NoteTypeId>@ntype.Name</option>
                }
            </select>
        </div>
        <ValidationMessage For="@(() => KAttribute.NoteTypeId)" />
    </div>

    <AttributeValueEditor @ref="attributeValueEditor" OnCancel="OnCancelAtrValueEditor" OnConfirm="OnConfirmAtrValueEditor"></AttributeValueEditor>

</EditForm>

@code {
    [Parameter] public string Title { get; set; } = "---";
    [Parameter] public KAttributeDto KAttribute { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnExit { get; set; }
    [Parameter] public List<NoteTypeDto> NoteTypes { get; set; } = new List<NoteTypeDto>();

    private AttributeValueEditor attributeValueEditor;

    protected async Task Save(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();

        if (formIsValid == false)
        {
            await showMessages.ShowErrorMessage("Incorrect data, check the required attributes. ");
            return;
        }

        await OnValidSubmit.InvokeAsync(formContext);
    }

    private void OnAtrValueNew()
    {
        attributeValueEditor.Show(null);
    }

    private async Task OnAtrValueDelete(KAttributeTabulatedValueDto atrValue)
    {
        if (atrValue.KAttributeTabulatedValueId == Guid.Empty)
        {
            KAttribute.KAttributeValues.Remove(atrValue);
            return;
        }

        var result = await webApiService.KAttributes.DeleteKAttributeTabulatedValueAsync(atrValue.KAttributeTabulatedValueId);
        if (!result.IsValid)
            await showMessages.ShowErrorMessage(result.Message);
        else
            KAttribute.KAttributeValues.Remove(atrValue);
    }

    private void OnAtrValueEdit(KAttributeTabulatedValueDto atrEdit)
    {
        attributeValueEditor.Show(atrEdit);
    }

    private void OnCancelAtrValueEditor()
    {
        attributeValueEditor.Hide();
    }

    private void OnConfirmAtrValueEditor(KAttributeTabulatedValueDto atrValue)
    {
        //var atrOld = KAttribute.KAttributeValues.Where(v => v.Value == atrValue.Value).SingleOrDefault();
        var atrOld = KAttribute.KAttributeValues.Where(v => v.KAttributeTabulatedValueId == atrValue.KAttributeTabulatedValueId).SingleOrDefault();

        if (atrOld == null)
        {
            atrValue.KAttributeId = KAttribute.KAttributeId;
            KAttribute.KAttributeValues.Add(atrValue);
        }
        else
        {
            var i = KAttribute.KAttributeValues.IndexOf(atrOld);
            KAttribute.KAttributeValues.RemoveAt(i);
            KAttribute.KAttributeValues.Insert(i, atrValue);
        }

        attributeValueEditor.Hide();
    }
}

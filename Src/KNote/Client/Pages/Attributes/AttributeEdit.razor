@page "/attributes/edit/{AttributeId}"

@inject IStore store
@inject DialogService dialogService

@attribute [Authorize(Roles = "Admin")]

@if (kattribute != null && showForm)
{
    <AttributeForm OnValidSubmit="OnSave" OnExit="OnExit" KAttribute="kattribute" NoteTypes="noteTypes" />
}
else
{
    <text>Loading ... </text>
}

@code {
    [Parameter] public string AttributeId { get; set; }

    private KAttributeDto kattribute;
    private bool showForm = false;
    private List<NoteTypeDto> noteTypes = new List<NoteTypeDto>();

    protected async override Task OnInitializedAsync()
    {

        var result = await store.KAttributes.GetAsync(Guid.Parse(AttributeId));
        if (!result.IsValid)
        {            
            dialogService.Close(null);
        }
        else
        {
            kattribute = result.Entity;
            kattribute.SetIsDirty(false);
        }

        var result2 = await store.NoteTypes.GetAllAsync();
        if (!result2.IsValid)
        {                        
            dialogService.Close(null);
        }
        else
        {
            noteTypes = result2.Entity;
            showForm = true;
        }

        await base.OnInitializedAsync();
    }

    private async Task OnSave()
    {
        if (!kattribute.IsDirty())
        {            
            dialogService.Close(kattribute);
        }
        else
        {
            if (kattribute.IsValid())
            {
                var result = await store.KAttributes.SaveAsync(kattribute);
                if (result.IsValid)                                    
                {                    
                    dialogService.Close(result.Entity);
                }
            }
        }
    }

    private void OnExit()
    {
        dialogService.Close(null);
    }

}

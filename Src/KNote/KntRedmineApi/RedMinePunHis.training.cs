﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.LightGbm;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace KntRedmineApi
{
    public partial class RedMinePunHis
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Gestion",outputColumnName:@"Gestion")      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Tema",outputColumnName:@"Tema"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Descripcion",outputColumnName:@"Descripcion"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Gestion",@"Tema",@"Descripcion"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"PH",inputColumnName:@"PH"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LightGbm(new LightGbmMulticlassTrainer.Options(){NumberOfLeaves=9,NumberOfIterations=944,MinimumExampleCountPerLeaf=61,LearningRate=0.0261744326658342,LabelColumnName=@"PH",FeatureColumnName=@"Features",ExampleWeightColumnName=null,Booster=new GradientBooster.Options(){SubsampleFraction=0.369476991416585,FeatureFraction=0.78903116077774,L1Regularization=9.03505131880367E-08,L2Regularization=0.000229219366296559},MaximumBinCountPerFeature=399}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
